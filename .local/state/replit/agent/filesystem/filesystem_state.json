{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# PictoText\n\n## Overview\n\nPictoText is a professional web application for extracting and manipulating text from images using advanced OCR technology. The application uses advanced OCR technology with content-aware inpainting to cleanly remove text from backgrounds, then presents the text as editable DOM elements that can be moved, styled, and customized independently. It features line-based text detection, soft mask generation, and sophisticated inpainting algorithms for professional-quality results.\n\n## Recent Changes (August 17, 2025)\n\n✓ **Google OAuth Integration**: Implemented full Google OAuth authentication with passport.js\n✓ **Social Authentication UI**: Added professional Google sign-in button with clean separator styling\n✓ **OAuth User Management**: Extended user schema to support OAuth providers and IDs\n✓ **Simplified Auth Options**: Removed Facebook/Apple, focusing on email registration + Google OAuth\n✓ **Production-Ready OAuth**: Configured callback URLs for production domain deployment\n✓ **Session Management**: Integrated passport session handling with existing authentication system\n✓ **Anonymous Usage Support**: Major architectural change - free tier no longer requires login\n✓ **Session-Based Tracking**: Anonymous users can use 3 free extractions per day via session tracking\n✓ **Smart Authentication Flow**: Only prompt for login when users exceed their daily limit\n✓ **Enhanced Usage API**: Modified /api/usage and /api/extract-text to support both authenticated and anonymous users\n✓ **Memory Storage Adaptation**: Extended memory storage to handle anonymous user tracking with session IDs\n✓ **Seamless User Experience**: Users can start using the app immediately without barriers\n✓ **PictoText Rebrand**: Complete visual rebrand with professional SVG logo and gradient styling\n✓ **Enhanced OCR Processing**: OCR.space API integration with advanced image preprocessing and confidence scoring\n✓ **Dual OCR System**: Implemented robust fallback system - OCR.space primary with local Tesseract.js backup for 100% reliability\n✓ **Premium User Experience**: Fixed upgrade button visibility and ensured seamless authentication flow\n✓ **Accurate Tier Limits**: Updated all UI references from \"unlimited\" to precise \"1500 extractions per month\" for premium tier\n✓ **Monthly Usage Tracking**: Backend properly enforces 1500 monthly extraction limit for premium users with automatic reset\n✓ **Professional UI**: Clean navigation with reduced menu items, modern typography and enterprise-grade appearance\n✓ **Smart Image Compression**: Automatic compression for large files with quality optimization\n✓ **Intelligent Filtering**: Context-aware text extraction that removes UI noise while preserving meaningful content\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\nThe frontend is built as a React Single Page Application (SPA) using TypeScript and modern React patterns:\n- **Framework**: React 18 with TypeScript for type safety\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: TanStack Query for server state management and caching\n- **UI Components**: Radix UI primitives with shadcn/ui component system\n- **Styling**: Tailwind CSS with CSS custom properties for theming\n- **Build Tool**: Vite for fast development and optimized production builds\n\n### Backend Architecture\nThe backend follows an Express.js RESTful API architecture:\n- **Framework**: Express.js with TypeScript\n- **Database ORM**: Drizzle ORM for type-safe database operations\n- **Schema Management**: Drizzle Kit for database migrations and schema management\n- **Storage Interface**: Abstracted storage layer with in-memory implementation (easily extensible to database)\n- **API Design**: RESTful endpoints with consistent JSON responses\n\n### Data Storage\n- **Database**: PostgreSQL (configured via Drizzle ORM)\n- **ORM**: Drizzle ORM with zod schema validation\n- **Session Management**: Connect-pg-simple for PostgreSQL session storage\n- **Current Implementation**: In-memory storage for development (MemStorage class)\n- **Anonymous Tracking**: Session-based usage tracking for non-authenticated users using `anon_${sessionId}` prefix\n\n### Authentication & Authorization\nThe application supports multiple authentication methods:\n- **Anonymous Usage**: Free tier (3 images/day) requires no authentication, tracked by session ID\n- **Email Registration**: Traditional username/password authentication with bcrypt hashing\n- **Google OAuth**: One-click Google sign-in using passport-google-oauth20 strategy\n- **User Management**: Extended user schema supporting both local and OAuth accounts\n- **Session Handling**: Express sessions with passport.js integration for OAuth flows\n- **Smart Authentication**: Only prompts for login when anonymous users exceed daily limits\n- **Progressive Enhancement**: Seamless upgrade path from anonymous to authenticated premium user\n\n### File Processing Architecture\n- **Upload Handling**: Client-side file validation and progress tracking\n- **File Size Limits**: Configurable limits (10MB default for basic users)\n- **Batch Processing**: Architecture supports future batch upload functionality\n- **OCR Processing**: Designed to integrate with external OCR services\n\n### Component Architecture\n- **Design System**: Consistent UI components using shadcn/ui and Radix primitives\n- **Responsive Design**: Mobile-first approach with adaptive navigation\n- **State Management**: Hooks-based state management with React Query for server state\n- **Form Handling**: React Hook Form with zod validation integration\n\n### Development Environment\n- **Development Server**: Vite dev server with HMR and error overlay\n- **Code Quality**: TypeScript strict mode with comprehensive type checking\n- **Build Process**: ESBuild for server bundling, Vite for client bundling\n- **Path Aliases**: Configured for clean imports (@/, @shared/)\n\n## External Dependencies\n\n### Core Framework Dependencies\n- **@neondatabase/serverless**: PostgreSQL serverless database driver\n- **drizzle-orm & drizzle-kit**: Database ORM and migration toolkit\n- **express**: Node.js web application framework\n- **vite**: Frontend build tool and dev server\n\n### UI and Styling\n- **@radix-ui/***: Comprehensive set of accessible UI primitives\n- **tailwindcss**: Utility-first CSS framework\n- **class-variance-authority**: Utility for managing CSS class variants\n- **clsx & tailwind-merge**: Class name utilities\n\n### State Management and Data Fetching\n- **@tanstack/react-query**: Server state management and caching\n- **react-hook-form**: Form handling with validation\n- **@hookform/resolvers**: Form validation resolvers\n\n### Development Tools\n- **tsx**: TypeScript execution environment\n- **@replit/vite-plugin-runtime-error-modal**: Development error handling\n- **@replit/vite-plugin-cartographer**: Development tooling for Replit environment\n\n### Utility Libraries\n- **date-fns**: Date manipulation and formatting\n- **nanoid**: Unique ID generation\n- **zod**: Schema validation and type inference\n- **wouter**: Lightweight React router\n\n### Session and Storage\n- **connect-pg-simple**: PostgreSQL session store for Express sessions\n\nThe application is designed with extensibility in mind, allowing for easy integration of actual OCR services, payment processing, and enhanced authentication systems.","size_bytes":7442},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport session from \"express-session\";\nimport passport from \"passport\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport \"./oauth-config\"; // Initialize passport strategies\n\nconst app = express();\napp.use(express.json({ limit: '50mb' })); // Increase limit for base64 images\napp.use(express.urlencoded({ extended: false, limit: '50mb' }));\n\n// Session middleware\napp.use(session({\n  secret: process.env.SESSION_SECRET || 'pictotext-secret-key-change-in-production',\n  resave: false,\n  saveUninitialized: false,\n  cookie: {\n    secure: false, // Set to true in production with HTTPS\n    httpOnly: true,\n    maxAge: 24 * 60 * 60 * 1000 // 24 hours\n  }\n}));\n\n// Initialize passport\napp.use(passport.initialize());\napp.use(passport.session());\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2665},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport multer from \"multer\";\nimport { z } from \"zod\";\nimport passport from \"passport\";\nimport { freeUsageService } from \"./free-usage-service\";\nimport { premiumService } from \"./premium-service\";\n// Removed old usage tracking imports - now using new tier system\nimport { OCRService } from \"./ocr-service\";\nimport { insertUserSchema, loginSchema, paypalPaymentSchema } from \"@shared/schema\";\nimport \"./oauth-config\"; // Initialize passport strategies\nimport { createPaypalOrder, capturePaypalOrder, loadPaypalDefault } from \"./paypal\";\n\nconst upload = multer({ \n  storage: multer.memoryStorage(),\n  limits: {\n    fileSize: 10 * 1024 * 1024, // 10MB limit\n  },\n});\n\n// Initialize OCR service\nlet ocrService: OCRService;\ntry {\n  ocrService = new OCRService();\n} catch (error) {\n  console.warn(\"OCR Service not initialized:\", error);\n}\n\n// Premium authentication middleware - only premium users can log in\nasync function requirePremiumAuth(req: any, res: any, next: any) {\n  if (!req.session?.userId) {\n    return res.status(401).json({ error: \"Not authenticated\" });\n  }\n  \n  const user = await premiumService.getUserById(req.session.userId);\n  if (!user) {\n    return res.status(401).json({ error: \"User not found\" });\n  }\n  \n  req.user = user;\n  next();\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Authentication endpoints\n  // PayPal payment endpoint - MUST be called before registration\n  app.post(\"/api/payment/paypal\", async (req, res) => {\n    try {\n      const paymentData = paypalPaymentSchema.parse(req.body);\n      \n      // For development: simulate successful payment\n      // In production: would verify actual PayPal payment webhook/transaction\n      const paypalOrderId = `PAYPAL_${Date.now()}`;\n      \n      // Add user to premium list after payment\n      await premiumService.addPremiumUser(paymentData.email, paypalOrderId);\n      \n      // Check if there's pending registration data for this email\n      const pendingRegistration = (req as any).session.pendingRegistration;\n      if (pendingRegistration && pendingRegistration.email === paymentData.email) {\n        // Create the user account immediately after successful payment\n        try {\n          const user = await premiumService.createUser({\n            username: pendingRegistration.username,\n            email: pendingRegistration.email,\n            password: pendingRegistration.password\n          });\n          \n          // Clear pending registration data\n          delete (req as any).session.pendingRegistration;\n          \n          console.log(`User account created after payment: ${user.email}`);\n          \n          res.json({\n            success: true,\n            message: \"Payment successful and account created! You can now sign in.\",\n            paypalOrderId: mockPaypalOrderId,\n            accountCreated: true\n          });\n        } catch (userCreationError: any) {\n          console.error(\"User creation error after payment:\", userCreationError);\n          // Payment succeeded but user creation failed\n          res.json({\n            success: true,\n            message: \"Payment successful! Please try registering again.\",\n            paypalOrderId: mockPaypalOrderId,\n            accountCreated: false,\n            error: userCreationError.message\n          });\n        }\n      } else {\n        res.json({\n          success: true,\n          message: \"Payment successful! You can now create your account.\",\n          paypalOrderId: mockPaypalOrderId\n        });\n      }\n    } catch (error: any) {\n      console.error(\"PayPal payment error:\", error);\n      res.status(400).json({ \n        error: error.message || \"Payment processing failed\" \n      });\n    }\n  });\n\n  // Registration endpoint - ONLY for premium users who have already paid\n  app.post(\"/api/register\", async (req, res) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n      \n      // Check if email is in premium users list\n      const isPremium = await premiumService.isPremiumUser(userData.email);\n      if (!isPremium) {\n        // Store pending registration data in session for after payment\n        (req as any).session.pendingRegistration = {\n          username: userData.username,\n          email: userData.email,\n          password: userData.password\n        };\n        \n        return res.status(402).json({ \n          error: \"Payment required to create premium account.\",\n          requiresPayment: true,\n          email: userData.email\n        });\n      }\n      \n      // Hash password if provided\n      let passwordHash: string | undefined;\n      if (userData.password) {\n        const bcrypt = await import(\"bcrypt\");\n        passwordHash = await bcrypt.hash(userData.password, 12);\n      }\n      \n      const user = await premiumService.createUser({\n        ...userData,\n        passwordHash\n      });\n      \n      // Automatically log in the user after registration\n      (req as any).session.userId = user.id;\n      \n      res.json({\n        message: \"Premium account created successfully\",\n        user: {\n          id: user.id,\n          username: user.username,\n          email: user.email\n        }\n      });\n    } catch (error: any) {\n      console.error(\"Registration error:\", error);\n      res.status(400).json({ \n        error: error.message || \"Failed to create account\" \n      });\n    }\n  });\n\n  // Login endpoint - ONLY for premium users\n  app.post(\"/api/login\", async (req, res) => {\n    try {\n      const credentials = loginSchema.parse(req.body);\n      const user = await premiumService.authenticateUser(credentials.username, credentials.password);\n      \n      if (!user) {\n        return res.status(401).json({ error: \"Invalid credentials\" });\n      }\n      \n      // Create session\n      (req as any).session.userId = user.id;\n      \n      res.json({ \n        success: true, \n        user: {\n          id: user.id,\n          username: user.username,\n          email: user.email\n        }\n      });\n    } catch (error: any) {\n      console.error(\"Login error:\", error);\n      res.status(400).json({ \n        error: error.message || \"Login failed\" \n      });\n    }\n  });\n\n  app.post(\"/api/logout\", (req, res) => {\n    (req as any).session.destroy(() => {\n      res.json({ success: true });\n    });\n  });\n\n  // Get current user - ONLY for premium authenticated users\n  app.get(\"/api/user\", requirePremiumAuth, async (req, res) => {\n    try {\n      const user = req.user as any; // Set by requirePremiumAuth middleware\n      res.json({ \n        user: {\n          id: user.id,\n          username: user.username,\n          email: user.email,\n          monthlyUsageCount: user.monthlyUsageCount || 0,\n          isPremium: true // All users who can access this endpoint are premium\n        }\n      });\n    } catch (error) {\n      console.error(\"Get user error:\", error);\n      res.status(500).json({ error: \"Failed to get user\" });\n    }\n  });\n\n  // Usage endpoint - supports both free (anonymous) and premium users\n  app.get(\"/api/usage\", async (req, res) => {\n    try {\n      const session = (req as any).session;\n      \n      if (session.userId) {\n        // Premium authenticated user\n        const usage = await premiumService.getMonthlyUsage(session.userId);\n        res.json({\n          imageCount: usage.count,\n          monthlyLimit: usage.limit,\n          canProcess: usage.canProcess,\n          userType: \"premium\"\n        });\n      } else {\n        // Free anonymous user\n        const usage = freeUsageService.getCurrentUsage(req);\n        // Set cookie for tracking\n        freeUsageService.setCookieInResponse(res, usage.cookieId);\n        res.json({\n          imageCount: usage.usageCount,\n          dailyLimit: usage.dailyLimit,\n          canProcess: usage.canProcess,\n          userType: \"free\"\n        });\n      }\n    } catch (error) {\n      console.error(\"Usage tracking error:\", error);\n      res.status(500).json({ error: \"Failed to get usage data\" });\n    }\n  });\n\n  // OCR Processing endpoint - supports both free and premium users\n  app.post(\"/api/extract-text\", upload.single('image'), async (req, res) => {\n    try {\n      const session = (req as any).session;\n      const useFiltering = req.body.useFiltering === 'true';\n      \n      if (!req.file) {\n        return res.status(400).json({ error: \"No image file provided\" });\n      }\n\n      // Check if OCR service is available\n      if (!ocrService) {\n        return res.status(503).json({ \n          error: \"OCR service is not available. Please check OCR_SPACE_API_KEY configuration.\" \n        });\n      }\n\n      let canProcess = false;\n      let isPremium = !!session.userId;\n\n      if (isPremium) {\n        // Premium authenticated user\n        const usage = await premiumService.getMonthlyUsage(session.userId);\n        canProcess = usage.canProcess;\n        \n        if (!canProcess) {\n          return res.status(429).json({ \n            error: \"Monthly limit of 1500 extractions exceeded\",\n            limitExceeded: true,\n            userType: \"premium\"\n          });\n        }\n      } else {\n        // Free anonymous user\n        const usage = freeUsageService.getCurrentUsage(req);\n        canProcess = usage.canProcess;\n        \n        if (!canProcess) {\n          return res.status(429).json({ \n            error: \"Daily limit of 3 free extractions exceeded. Purchase premium for 1500 monthly extractions.\",\n            limitExceeded: true,\n            userType: \"free\",\n            requiresPayment: true // Tell frontend to show payment options\n          });\n        }\n      }\n\n      // Process the image with OCR\n      const result = await ocrService.extractTextFromImage(req.file.buffer, useFiltering);\n      \n      // Record the usage\n      if (isPremium) {\n        await premiumService.incrementMonthlyUsage(session.userId);\n      } else {\n        const usage = freeUsageService.incrementUsage(req);\n        freeUsageService.setCookieInResponse(res, usage.cookieId);\n      }\n      \n      res.json(result);\n    } catch (error) {\n      console.error(\"OCR processing error:\", error);\n      \n      if (error instanceof Error) {\n        return res.status(500).json({ error: error.message });\n      }\n      \n      res.status(500).json({ error: \"Failed to process image\" });\n    }\n  });\n\n  // PayPal integration endpoints\n  app.get(\"/api/paypal/setup\", async (req, res) => {\n    await loadPaypalDefault(req, res);\n  });\n\n  app.post(\"/api/paypal/order\", async (req, res) => {\n    // Request body should contain: { intent, amount, currency }\n    await createPaypalOrder(req, res);\n  });\n\n  app.post(\"/api/paypal/order/:orderID/capture\", async (req, res) => {\n    await capturePaypalOrder(req, res);\n  });\n\n  // Google OAuth routes\n  app.get(\"/api/auth/google\", \n    passport.authenticate('google', { scope: ['profile', 'email'] })\n  );\n\n  app.get(\"/api/auth/google/callback\", \n    passport.authenticate('google', { \n      failureRedirect: '/?error=auth_failed',\n      failureMessage: true \n    }),\n    (req, res) => {\n      // Check if user needs payment first\n      const user = req.user as any;\n      if (user && user.needsPayment) {\n        // Store OAuth data in session temporarily and redirect to payment flow\n        (req as any).session.pendingOAuth = {\n          email: user.email,\n          oauthData: user.oauthData\n        };\n        console.log('Google OAuth requires payment for:', user.email);\n        res.redirect('/?payment=required&email=' + encodeURIComponent(user.email));\n        return;\n      }\n      \n      // Successful authentication for premium user\n      if (user && user.id) {\n        (req as any).session.userId = user.id;\n        console.log('Google OAuth success for premium user:', user.email);\n        res.redirect('/?auth=success'); // Redirect to main app with success indicator\n      } else {\n        console.log('Google OAuth failed: no user returned');\n        res.redirect('/?error=auth_failed');\n      }\n    }\n  );\n\n  // Add logout route\n  app.post(\"/api/logout\", (req, res) => {\n    (req as any).session.destroy();\n    res.json({ success: true });\n  });\n\n  // Return the HTTP server without listening (index.ts handles the listening)\n  return createServer(app);\n}","size_bytes":12228},"server/storage.ts":{"content":"import { type User, insertUserSchema } from \"@shared/schema\";\nimport { type z } from \"zod\";\n\ntype InsertUser = z.infer<typeof insertUserSchema>;\nimport { randomUUID } from \"crypto\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n\n  constructor() {\n    this.users = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.email === email,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    \n    // Handle password hashing if password is provided\n    let passwordHash: string | null = null;\n    if (insertUser.password) {\n      const bcrypt = await import(\"bcrypt\");\n      passwordHash = await bcrypt.hash(insertUser.password, 12);\n    }\n    \n    const user: User = { \n      id,\n      username: insertUser.username,\n      email: insertUser.email,\n      passwordHash,\n      oauthProvider: insertUser.oauthProvider || null,\n      oauthId: insertUser.oauthId || null,\n      monthlyUsageCount: 0,\n      lastUsageReset: new Date(),\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    this.users.set(id, user);\n    return user;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":1861},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { pgTable, text, timestamp, boolean, integer, uuid, index } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema, createSelectSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Premium users table - populated via PayPal payments first, then login allowed\nexport const premiumUsers = pgTable(\"premium_users\", {\n  id: uuid(\"id\").defaultRandom().primaryKey(),\n  email: text(\"email\").notNull().unique(),\n  paypalOrderId: text(\"paypal_order_id\"),\n  subscriptionStatus: text(\"subscription_status\", { enum: [\"active\", \"cancelled\", \"expired\"] }).default(\"active\").notNull(),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\", { withTimezone: true }).defaultNow().notNull(),\n}, (table) => ({\n  emailIdx: index(\"premium_users_email_idx\").on(table.email),\n}));\n\n// Users table - only for premium subscribers who can actually log in\nexport const users = pgTable(\"users\", {\n  id: uuid(\"id\").defaultRandom().primaryKey(),\n  username: text(\"username\").notNull().unique(),\n  email: text(\"email\").notNull().unique(),\n  passwordHash: text(\"password_hash\"),  // Optional for OAuth users\n  oauthProvider: text(\"oauth_provider\"),  // google\n  oauthId: text(\"oauth_id\"),  // OAuth provider user ID\n  monthlyUsageCount: integer(\"monthly_usage_count\").default(0).notNull(),\n  lastUsageReset: timestamp(\"last_usage_reset\", { withTimezone: true }).defaultNow().notNull(),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\", { withTimezone: true }).defaultNow().notNull(),\n}, (table) => ({\n  usernameIdx: index(\"users_username_idx\").on(table.username),\n  emailIdx: index(\"users_email_idx\").on(table.email),\n  oauthIdx: index(\"users_oauth_idx\").on(table.oauthProvider, table.oauthId),\n}));\n\n// Free tier usage tracking by IP + cookie (no user accounts)\nexport const freeUsage = pgTable(\"free_usage\", {\n  id: uuid(\"id\").defaultRandom().primaryKey(),\n  ipAddress: text(\"ip_address\").notNull(),\n  cookieId: text(\"cookie_id\").notNull(),\n  usageCount: integer(\"usage_count\").default(0).notNull(),\n  lastUsage: timestamp(\"last_usage\", { withTimezone: true }).defaultNow().notNull(),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).defaultNow().notNull(),\n}, (table) => ({\n  ipCookieIdx: index(\"free_usage_ip_cookie_idx\").on(table.ipAddress, table.cookieId),\n  lastUsageIdx: index(\"free_usage_last_usage_idx\").on(table.lastUsage),\n}));\n\nexport const sessions = pgTable(\"sessions\", {\n  sid: text(\"sid\").primaryKey(),\n  sess: text(\"sess\").notNull(),\n  expire: timestamp(\"expire\", { withTimezone: true }).notNull(),\n}, (table) => ({\n  expireIdx: index(\"sessions_expire_idx\").on(table.expire),\n}));\n\nexport const usageLogs = pgTable(\"usage_logs\", {\n  id: uuid(\"id\").defaultRandom().primaryKey(),\n  userId: uuid(\"user_id\").references(() => users.id, { onDelete: \"cascade\" }),\n  ipAddress: text(\"ip_address\"), // For free users\n  cookieId: text(\"cookie_id\"), // For free users\n  imageProcessed: timestamp(\"image_processed\", { withTimezone: true }).defaultNow().notNull(),\n  extractedWords: integer(\"extracted_words\").default(0).notNull(),\n  confidence: integer(\"confidence\").default(0).notNull(),\n  userType: text(\"user_type\", { enum: [\"free\", \"premium\"] }).notNull(),\n}, (table) => ({\n  userIdIdx: index(\"usage_logs_user_id_idx\").on(table.userId),\n  ipCookieIdx: index(\"usage_logs_ip_cookie_idx\").on(table.ipAddress, table.cookieId),\n  dateIdx: index(\"usage_logs_date_idx\").on(table.imageProcessed),\n}));\n\n// PayPal payment records\nexport const payments = pgTable(\"payments\", {\n  id: uuid(\"id\").defaultRandom().primaryKey(),\n  email: text(\"email\").notNull(),\n  paypalOrderId: text(\"paypal_order_id\").unique().notNull(),\n  amount: text(\"amount\").notNull(), // Store as string for precision\n  currency: text(\"currency\").default(\"USD\").notNull(),\n  status: text(\"status\", { enum: [\"pending\", \"completed\", \"failed\"] }).default(\"pending\").notNull(),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).defaultNow().notNull(),\n  completedAt: timestamp(\"completed_at\", { withTimezone: true }),\n}, (table) => ({\n  emailIdx: index(\"payments_email_idx\").on(table.email),\n  paypalIdx: index(\"payments_paypal_idx\").on(table.paypalOrderId),\n}));\n\n// Insert schemas\nexport const insertPremiumUserSchema = createInsertSchema(premiumUsers).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  passwordHash: true,\n  monthlyUsageCount: true,\n  lastUsageReset: true,\n}).extend({\n  password: z.string().min(6, \"Password must be at least 6 characters\").optional(),\n});\n\nexport const insertFreeUsageSchema = createInsertSchema(freeUsage).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertUsageLogSchema = createInsertSchema(usageLogs).omit({\n  id: true,\n  imageProcessed: true,\n});\n\nexport const insertPaymentSchema = createInsertSchema(payments).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Select schemas\nexport const selectPremiumUserSchema = createSelectSchema(premiumUsers);\nexport const selectUserSchema = createSelectSchema(users).omit({\n  passwordHash: true,\n});\nexport const selectFreeUsageSchema = createSelectSchema(freeUsage);\nexport const selectUsageLogSchema = createSelectSchema(usageLogs);\nexport const selectPaymentSchema = createSelectSchema(payments);\n\n// Types\nexport type PremiumUser = typeof premiumUsers.$inferSelect;\nexport type NewPremiumUser = z.infer<typeof insertPremiumUserSchema>;\n\nexport type User = typeof users.$inferSelect;\nexport type NewUser = z.infer<typeof insertUserSchema>;\nexport type PublicUser = z.infer<typeof selectUserSchema>;\n\nexport type FreeUsage = typeof freeUsage.$inferSelect;\nexport type NewFreeUsage = z.infer<typeof insertFreeUsageSchema>;\n\nexport type UsageLog = typeof usageLogs.$inferSelect;\nexport type NewUsageLog = z.infer<typeof insertUsageLogSchema>;\n\nexport type Payment = typeof payments.$inferSelect;\nexport type NewPayment = z.infer<typeof insertPaymentSchema>;\n\n// Login schema - only for premium users\nexport const loginSchema = z.object({\n  username: z.string().min(3, \"Username must be at least 3 characters\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n});\n\nexport type LoginCredentials = z.infer<typeof loginSchema>;\n\n// PayPal payment schema\nexport const paypalPaymentSchema = z.object({\n  email: z.string().email(\"Valid email is required\"),\n  amount: z.string().regex(/^\\d+\\.\\d{2}$/, \"Amount must be in format 0.00\"),\n  currency: z.string().default(\"USD\"),\n});\n\nexport type PayPalPaymentData = z.infer<typeof paypalPaymentSchema>;\n\n// OCR result schema\nexport const ocrResultSchema = z.object({\n  extractedText: z.string(),\n  rawText: z.string(),\n  confidence: z.number().min(0).max(100),\n  wordCount: z.number().min(0),\n});\n\nexport type OCRResult = z.infer<typeof ocrResultSchema>;","size_bytes":6944},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"@/hooks/useAuth\";\nimport Navigation from \"@/components/navigation\";\nimport Home from \"@/pages/home\";\nimport Settings from \"@/pages/settings\";\nimport Premium from \"@/pages/premium\";\nimport Terms from \"@/pages/terms\";\nimport Privacy from \"@/pages/privacy\";\nimport RefundPolicy from \"@/pages/refund-policy\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/premium\" component={Premium} />\n      <Route path=\"/terms\" component={Terms} />\n      <Route path=\"/privacy\" component={Privacy} />\n      <Route path=\"/refund-policy\" component={RefundPolicy} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <TooltipProvider>\n          <div className=\"min-h-screen bg-slate-50\">\n            <Navigation />\n            <Router />\n          </div>\n          <Toaster />\n        </TooltipProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1366},"client/src/index.css":{"content":"@import url('https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(220.91 39.29% 50.98%);\n  --primary-foreground: hsl(0 0% 100%);\n  --primary-50: hsl(214.29 100% 96.86%);\n  --primary-500: hsl(217.22 91.22% 59.8%);\n  --primary-600: hsl(220.91 39.29% 50.98%);\n  --primary-700: hsl(223.68 87.33% 36.47%);\n  --secondary: hsl(210 25% 7.8431%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(211.5789 51.3514% 92.7451%);\n  --accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Inter, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(203.7736 87.6033% 52.5490%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(202.8169 89.1213% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Inter, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-slate-50 text-foreground;\n    font-family: 'Inter', sans-serif;\n  }\n}\n\n@layer components {\n  .section-transition {\n    transition: all 0.3s ease-in-out;\n  }\n  \n  .upload-zone {\n    transition: all 0.3s ease;\n  }\n  \n  .upload-zone:hover {\n    transform: translateY(-2px);\n  }\n}\n\n@keyframes slideIn {\n  from { \n    transform: translateX(-100%); \n    opacity: 0; \n  }\n  to { \n    transform: translateX(0); \n    opacity: 1; \n  }\n}\n\n@keyframes fadeIn {\n  from { \n    opacity: 0; \n    transform: translateY(20px); \n  }\n  to { \n    opacity: 1; \n    transform: translateY(0); \n  }\n}\n\n.animate-slide-in {\n  animation: slideIn 0.3s ease-out;\n}\n\n.animate-fade-in {\n  animation: fadeIn 0.3s ease-out;\n}\n","size_bytes":5962},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/canva-text-editor.tsx":{"content":"import { useState, useRef, useEffect, useCallback } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport type { \n  TextRegion, \n  TextLine,\n  InpaintRequest, \n  InpaintResponse,\n  TextLayer,\n  ExportRequest,\n  ExportResponse\n} from \"@shared/schema\";\n\ninterface CanvaTextEditorProps {\n  originalImage: string;\n  textRegions: TextRegion[];\n  textLines?: TextLine[]; // Enhanced line-based processing\n  cleanedImage?: string; // Auto-provided by PhotoExtractor\n  onTextLayersChange?: (layers: TextLayer[]) => void;\n}\n\nconst CanvaTextEditor = ({ originalImage, textRegions, textLines, cleanedImage: externalCleanedImage, onTextLayersChange }: CanvaTextEditorProps) => {\n  const [cleanedImage, setCleanedImage] = useState<string>(\"\");\n  const [textLayers, setTextLayers] = useState<TextLayer[]>([]);\n  const [selectedLayer, setSelectedLayer] = useState<string | null>(null);\n  const [isDragging, setIsDragging] = useState(false);\n  const [dragOffset, setDragOffset] = useState({ x: 0, y: 0 });\n  const [imageLoaded, setImageLoaded] = useState(false);\n  const [imageDimensions, setImageDimensions] = useState({ width: 0, height: 0 });\n  const [exportFormat, setExportFormat] = useState<\"png\" | \"jpeg\" | \"webp\">(\"png\");\n  const [exportQuality, setExportQuality] = useState(0.9);\n  \n  const originalImgRef = useRef<HTMLImageElement>(null);\n  const cleanedImgRef = useRef<HTMLImageElement>(null);\n  const editorRef = useRef<HTMLDivElement>(null);\n  const { toast } = useToast();\n\n  // Initialize text layers from detected lines (preferred) or regions with enhanced styling\n  useEffect(() => {\n    const sourceData = textLines && textLines.length > 0 ? textLines : textRegions;\n    \n    if (sourceData.length > 0 && textLayers.length === 0) {\n      const initialLayers: TextLayer[] = sourceData.map((item, index) => ({\n        id: item.id,\n        text: item.text,\n        originalText: 'originalText' in item ? item.originalText : item.text,\n        x: item.x,\n        y: item.y,\n        width: item.width,\n        height: item.height,\n        fontSize: 'estimatedFontSize' in item ? item.estimatedFontSize : Math.max(12, item.height * 0.8),\n        fontFamily: \"Arial\",\n        fontWeight: 'estimatedFontWeight' in item ? item.estimatedFontWeight : \"400\",\n        fontStyle: \"normal\",\n        textAlign: \"left\",\n        lineHeight: 1.2,\n        letterSpacing: 'estimatedLetterSpacing' in item ? item.estimatedLetterSpacing : 0,\n        color: 'estimatedColor' in item ? item.estimatedColor : \"#000000\",\n        backgroundColor: \"transparent\",\n        borderColor: \"transparent\",\n        borderWidth: 0,\n        borderRadius: 0,\n        padding: 0,\n        shadow: \"none\",\n        opacity: 1,\n        isVisible: true,\n        isEdited: false,\n        rotation: 0,\n        zIndex: index + 1,\n      }));\n      setTextLayers(initialLayers);\n      onTextLayersChange?.(initialLayers);\n    }\n  }, [textRegions, textLines, textLayers.length, onTextLayersChange]);\n\n  // Content-aware inpainting mutation\n  const inpaintMutation = useMutation({\n    mutationFn: async (inpaintRequest: InpaintRequest): Promise<InpaintResponse> => {\n      const response = await fetch(\"/api/inpaint-image\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(inpaintRequest),\n      });\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      return await response.json();\n    },\n    onSuccess: (data: InpaintResponse) => {\n      if (data.success) {\n        setCleanedImage(data.cleanedImage);\n        toast({\n          title: \"Text extracted successfully!\",\n          description: \"Background cleaned and text elements are now editable. Move, style, and customize each text element independently.\",\n        });\n      } else {\n        toast({\n          title: \"Text extraction failed\",\n          description: data.error || \"Failed to process the image.\",\n          variant: \"destructive\",\n        });\n      }\n    },\n    onError: (error) => {\n      toast({\n        title: \"Processing error\",\n        description: \"An error occurred while processing your image. Please try again.\",\n        variant: \"destructive\",\n      });\n      console.error(\"Inpainting error:\", error);\n    },\n  });\n\n  // Export mutation\n  const exportMutation = useMutation({\n    mutationFn: async (exportRequest: ExportRequest): Promise<ExportResponse> => {\n      const response = await fetch(\"/api/export-image\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(exportRequest),\n      });\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      return await response.json();\n    },\n    onSuccess: (data: ExportResponse) => {\n      if (data.success) {\n        // Download the exported image\n        const link = document.createElement('a');\n        link.href = data.exportedImage;\n        link.download = `edited-image.${exportFormat}`;\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n        \n        toast({\n          title: \"Export successful!\",\n          description: \"Your edited image has been downloaded.\",\n        });\n      } else {\n        toast({\n          title: \"Export failed\",\n          description: data.error || \"Failed to export the image.\",\n          variant: \"destructive\",\n        });\n      }\n    },\n    onError: (error) => {\n      toast({\n        title: \"Export error\",\n        description: \"An error occurred while exporting your image.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update cleaned image when provided by PhotoExtractor\n  useEffect(() => {\n    if (externalCleanedImage) {\n      setCleanedImage(externalCleanedImage);\n    } else if (originalImage && textLayers.length > 0 && !cleanedImage) {\n      // Use the original image as background until inpainting completes\n      setCleanedImage(originalImage);\n    }\n  }, [externalCleanedImage, originalImage, textLayers.length, cleanedImage]);\n\n  const updateTextLayer = useCallback((id: string, updates: Partial<TextLayer>) => {\n    setTextLayers(prev => {\n      const updated = prev.map(layer => \n        layer.id === id \n          ? { ...layer, ...updates, isEdited: true }\n          : layer\n      );\n      onTextLayersChange?.(updated);\n      return updated;\n    });\n  }, [onTextLayersChange]);\n\n  const deleteTextLayer = (id: string) => {\n    setTextLayers(prev => {\n      const updated = prev.filter(layer => layer.id !== id);\n      onTextLayersChange?.(updated);\n      return updated;\n    });\n    setSelectedLayer(null);\n  };\n\n  const duplicateTextLayer = (id: string) => {\n    const layer = textLayers.find(l => l.id === id);\n    if (!layer) return;\n    \n    const newLayer: TextLayer = {\n      ...layer,\n      id: `${id}-copy-${Date.now()}`,\n      x: layer.x + 20,\n      y: layer.y + 20,\n      zIndex: Math.max(...textLayers.map(l => l.zIndex)) + 1,\n    };\n    \n    setTextLayers(prev => [...prev, newLayer]);\n    setSelectedLayer(newLayer.id);\n  };\n\n  const handleImageLoad = (e: React.SyntheticEvent<HTMLImageElement>) => {\n    const img = e.target as HTMLImageElement;\n    setImageDimensions({ width: img.naturalWidth, height: img.naturalHeight });\n    setImageLoaded(true);\n  };\n\n  // Drag and drop functionality\n  const handleMouseDown = (e: React.MouseEvent, layerId: string) => {\n    e.preventDefault();\n    e.stopPropagation();\n    \n    const rect = editorRef.current?.getBoundingClientRect();\n    if (!rect) return;\n    \n    const layer = textLayers.find(l => l.id === layerId);\n    if (!layer) return;\n    \n    setSelectedLayer(layerId);\n    setIsDragging(true);\n    \n    const scaleX = cleanedImgRef.current?.offsetWidth || 1 / imageDimensions.width || 1;\n    const scaleY = cleanedImgRef.current?.offsetHeight || 1 / imageDimensions.height || 1;\n    \n    setDragOffset({\n      x: e.clientX - rect.left - layer.x * scaleX,\n      y: e.clientY - rect.top - layer.y * scaleY,\n    });\n  };\n\n  const handleMouseMove = useCallback((e: MouseEvent) => {\n    if (!isDragging || !selectedLayer || !editorRef.current) return;\n    \n    const rect = editorRef.current.getBoundingClientRect();\n    const scaleX = cleanedImgRef.current?.offsetWidth || 1 / imageDimensions.width || 1;\n    const scaleY = cleanedImgRef.current?.offsetHeight || 1 / imageDimensions.height || 1;\n    \n    const newX = Math.max(0, Math.min(\n      imageDimensions.width - 100,\n      (e.clientX - rect.left - dragOffset.x) / scaleX\n    ));\n    const newY = Math.max(0, Math.min(\n      imageDimensions.height - 50,\n      (e.clientY - rect.top - dragOffset.y) / scaleY\n    ));\n    \n    updateTextLayer(selectedLayer, { x: newX, y: newY });\n  }, [isDragging, selectedLayer, dragOffset, imageDimensions, updateTextLayer]);\n\n  const handleMouseUp = useCallback(() => {\n    setIsDragging(false);\n  }, []);\n\n  useEffect(() => {\n    if (isDragging) {\n      document.addEventListener('mousemove', handleMouseMove);\n      document.addEventListener('mouseup', handleMouseUp);\n      \n      return () => {\n        document.removeEventListener('mousemove', handleMouseMove);\n        document.removeEventListener('mouseup', handleMouseUp);\n      };\n    }\n  }, [isDragging, handleMouseMove, handleMouseUp]);\n\n  const getLayerStyle = (layer: TextLayer) => {\n    const scaleX = cleanedImgRef.current?.offsetWidth || 1 / imageDimensions.width || 1;\n    const scaleY = cleanedImgRef.current?.offsetHeight || 1 / imageDimensions.height || 1;\n    \n    return {\n      position: 'absolute' as const,\n      left: `${layer.x * scaleX}px`,\n      top: `${layer.y * scaleY}px`,\n      width: `${Math.max(layer.width * scaleX, 50)}px`,\n      minHeight: `${Math.max(layer.height * scaleY, 20)}px`,\n      fontSize: `${layer.fontSize * Math.min(scaleX, scaleY)}px`,\n      fontFamily: layer.fontFamily,\n      fontWeight: layer.fontWeight,\n      fontStyle: layer.fontStyle,\n      textAlign: layer.textAlign as any,\n      lineHeight: layer.lineHeight,\n      letterSpacing: `${layer.letterSpacing}px`,\n      color: layer.color,\n      backgroundColor: layer.backgroundColor,\n      borderColor: layer.borderColor,\n      borderWidth: `${layer.borderWidth}px`,\n      borderStyle: layer.borderWidth > 0 ? 'solid' : 'none',\n      borderRadius: `${layer.borderRadius}px`,\n      padding: `${layer.padding}px`,\n      boxShadow: layer.shadow,\n      opacity: layer.opacity,\n      transform: `rotate(${layer.rotation}deg)`,\n      cursor: isDragging && selectedLayer === layer.id ? 'grabbing' : 'grab',\n      border: selectedLayer === layer.id ? '2px dashed #3b82f6' : 'none',\n      outline: selectedLayer === layer.id ? '1px solid #3b82f6' : 'none',\n      display: layer.isVisible ? 'block' : 'none',\n      zIndex: selectedLayer === layer.id ? 1000 : layer.zIndex + 10,\n      pointerEvents: 'auto' as const,\n      userSelect: 'none' as const,\n      whiteSpace: 'pre-wrap' as const,\n      overflow: 'visible' as const,\n    };\n  };\n\n  const handleExport = () => {\n    if (!cleanedImage || textLayers.length === 0) {\n      toast({\n        title: \"Nothing to export\",\n        description: \"Please grab text from an image first.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    const exportRequest: ExportRequest = {\n      cleanedImage,\n      textLayers,\n      format: exportFormat,\n      quality: exportQuality,\n    };\n    \n    exportMutation.mutate(exportRequest);\n  };\n\n  const selectedLayerData = textLayers.find(layer => layer.id === selectedLayer);\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header with Grab Text Button */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div>\n              <h3 className=\"text-xl font-bold text-slate-900 mb-2\">\n                🎨 Canva-Style Text Editor\n              </h3>\n              <p className=\"text-slate-600\">\n                Edit each text element independently - drag, style, and customize as needed\n              </p>\n            </div>\n            <div className=\"flex gap-3\">\n\n              \n              {cleanedImage && textLayers.length > 0 && (\n                <Button \n                  onClick={handleExport}\n                  disabled={exportMutation.isPending}\n                  data-testid=\"button-export\"\n                  className=\"bg-green-600 hover:bg-green-700 text-white px-6 py-3 text-lg font-semibold\"\n                >\n                  {exportMutation.isPending ? (\n                    <>\n                      <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                      Exporting...\n                    </>\n                  ) : (\n                    <>\n                      <i className=\"fas fa-download mr-2\"></i>\n                      Export Final Image\n                    </>\n                  )}\n                </Button>\n              )}\n            </div>\n          </div>\n          \n          {!cleanedImage && (\n            <div className=\"p-4 bg-blue-50 rounded-lg border border-blue-200\">\n              <p className=\"text-blue-800 text-sm\">\n                <i className=\"fas fa-info-circle mr-2\"></i>\n                Upload an image and click \"Grab Text\" to extract all text as editable elements. \n                The background will be automatically cleaned using content-aware inpainting.\n              </p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Side-by-side Image Display */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Original Image */}\n        <Card>\n          <CardContent className=\"p-4\">\n            <h4 className=\"text-lg font-semibold mb-3 flex items-center\">\n              <i className=\"fas fa-image text-blue-600 mr-2\"></i>\n              Original Image\n            </h4>\n            <div className=\"relative bg-gray-50 rounded-lg overflow-hidden\">\n              <img\n                ref={originalImgRef}\n                src={originalImage}\n                alt=\"Original\"\n                className=\"w-full h-auto\"\n                onLoad={handleImageLoad}\n                data-testid=\"img-original\"\n              />\n              {/* Text region overlays for reference */}\n              {imageLoaded && textRegions.map(region => (\n                <div\n                  key={`orig-${region.id}`}\n                  className=\"absolute border-2 border-red-400 bg-red-100 bg-opacity-30\"\n                  style={{\n                    left: `${(region.x / imageDimensions.width) * 100}%`,\n                    top: `${(region.y / imageDimensions.height) * 100}%`,\n                    width: `${(region.width / imageDimensions.width) * 100}%`,\n                    height: `${(region.height / imageDimensions.height) * 100}%`,\n                  }}\n                >\n                  <span className=\"text-xs text-red-700 font-medium p-1\">\n                    {region.originalText}\n                  </span>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Edited Image with DOM Text Layers */}\n        <Card>\n          <CardContent className=\"p-4\">\n            <h4 className=\"text-lg font-semibold mb-3 flex items-center\">\n              <i className=\"fas fa-edit text-green-600 mr-2\"></i>\n              Editable Text Layers\n            </h4>\n            <div \n              ref={editorRef}\n              className=\"relative bg-gray-50 rounded-lg overflow-hidden select-none\"\n              style={{ minHeight: '300px', cursor: isDragging ? 'grabbing' : 'default' }}\n            >\n              {cleanedImage ? (\n                <>\n                  <img\n                    ref={cleanedImgRef}\n                    src={cleanedImage}\n                    alt=\"Clean background\"\n                    className=\"w-full h-auto pointer-events-none\"\n                    data-testid=\"img-cleaned\"\n                  />\n                  {/* DOM-based text layers */}\n                  {textLayers.map(layer => (\n                    <div\n                      key={layer.id}\n                      style={getLayerStyle(layer)}\n                      onMouseDown={(e) => handleMouseDown(e, layer.id)}\n                      onClick={() => setSelectedLayer(layer.id)}\n                      data-testid={`text-layer-${layer.id}`}\n                      suppressContentEditableWarning\n                      contentEditable\n                      onBlur={(e) => {\n                        const newText = e.currentTarget.textContent || '';\n                        if (newText !== layer.text) {\n                          updateTextLayer(layer.id, { text: newText });\n                        }\n                      }}\n                      className=\"cursor-grab hover:cursor-grab active:cursor-grabbing transition-all duration-200\"\n                    >\n                      {layer.text}\n                    </div>\n                  ))}\n                </>\n              ) : (\n                <div className=\"flex items-center justify-center h-64 text-slate-500\">\n                  <div className=\"text-center\">\n                    <i className=\"fas fa-magic text-4xl mb-4 text-slate-400\"></i>\n                    <p>Click \"Grab Text\" to extract editable text elements</p>\n                  </div>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Advanced Text Styling Panel */}\n      {selectedLayerData && (\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <h4 className=\"text-lg font-semibold flex items-center\">\n                <i className=\"fas fa-palette text-purple-600 mr-2\"></i>\n                Text Styling - \"{selectedLayerData.text.substring(0, 20)}...\"\n              </h4>\n              <div className=\"flex gap-2\">\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => duplicateTextLayer(selectedLayerData.id)}\n                  data-testid={`button-duplicate-${selectedLayerData.id}`}\n                >\n                  <i className=\"fas fa-copy mr-1\"></i>\n                  Duplicate\n                </Button>\n                <Button\n                  variant=\"destructive\"\n                  size=\"sm\"\n                  onClick={() => deleteTextLayer(selectedLayerData.id)}\n                  data-testid={`button-delete-${selectedLayerData.id}`}\n                >\n                  <i className=\"fas fa-trash mr-1\"></i>\n                  Delete\n                </Button>\n              </div>\n            </div>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {/* Text Content */}\n              <div className=\"space-y-4\">\n                <div>\n                  <Label className=\"text-sm font-medium\">Text Content</Label>\n                  <Textarea\n                    value={selectedLayerData.text}\n                    onChange={(e) => updateTextLayer(selectedLayerData.id, { text: e.target.value })}\n                    className=\"mt-1\"\n                    rows={3}\n                    data-testid={`input-text-${selectedLayerData.id}`}\n                  />\n                </div>\n                \n                <div>\n                  <Label className=\"text-sm font-medium\">Font Family</Label>\n                  <Select\n                    value={selectedLayerData.fontFamily}\n                    onValueChange={(value) => updateTextLayer(selectedLayerData.id, { fontFamily: value })}\n                  >\n                    <SelectTrigger className=\"mt-1\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"Arial\">Arial</SelectItem>\n                      <SelectItem value=\"Helvetica\">Helvetica</SelectItem>\n                      <SelectItem value=\"Times New Roman\">Times New Roman</SelectItem>\n                      <SelectItem value=\"Georgia\">Georgia</SelectItem>\n                      <SelectItem value=\"Courier New\">Courier New</SelectItem>\n                      <SelectItem value=\"Verdana\">Verdana</SelectItem>\n                      <SelectItem value=\"Impact\">Impact</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              {/* Typography */}\n              <div className=\"space-y-4\">\n                <div>\n                  <Label className=\"text-sm font-medium\">Font Size: {selectedLayerData.fontSize}px</Label>\n                  <Slider\n                    value={[selectedLayerData.fontSize]}\n                    onValueChange={([value]) => updateTextLayer(selectedLayerData.id, { fontSize: value })}\n                    min={8}\n                    max={120}\n                    step={1}\n                    className=\"mt-2\"\n                  />\n                </div>\n                \n                <div className=\"grid grid-cols-2 gap-2\">\n                  <div>\n                    <Label className=\"text-sm font-medium\">Weight</Label>\n                    <Select\n                      value={selectedLayerData.fontWeight}\n                      onValueChange={(value) => updateTextLayer(selectedLayerData.id, { fontWeight: value })}\n                    >\n                      <SelectTrigger className=\"mt-1\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"300\">Light</SelectItem>\n                        <SelectItem value=\"400\">Normal</SelectItem>\n                        <SelectItem value=\"600\">Semi Bold</SelectItem>\n                        <SelectItem value=\"700\">Bold</SelectItem>\n                        <SelectItem value=\"900\">Black</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  \n                  <div>\n                    <Label className=\"text-sm font-medium\">Style</Label>\n                    <Select\n                      value={selectedLayerData.fontStyle}\n                      onValueChange={(value) => updateTextLayer(selectedLayerData.id, { fontStyle: value })}\n                    >\n                      <SelectTrigger className=\"mt-1\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"normal\">Normal</SelectItem>\n                        <SelectItem value=\"italic\">Italic</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n                \n                <div>\n                  <Label className=\"text-sm font-medium\">Text Align</Label>\n                  <Select\n                    value={selectedLayerData.textAlign}\n                    onValueChange={(value) => updateTextLayer(selectedLayerData.id, { textAlign: value })}\n                  >\n                    <SelectTrigger className=\"mt-1\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"left\">Left</SelectItem>\n                      <SelectItem value=\"center\">Center</SelectItem>\n                      <SelectItem value=\"right\">Right</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              {/* Colors & Effects */}\n              <div className=\"space-y-4\">\n                <div>\n                  <Label className=\"text-sm font-medium\">Text Color</Label>\n                  <Input\n                    type=\"color\"\n                    value={selectedLayerData.color}\n                    onChange={(e) => updateTextLayer(selectedLayerData.id, { color: e.target.value })}\n                    className=\"mt-1 h-10\"\n                    data-testid={`input-color-${selectedLayerData.id}`}\n                  />\n                </div>\n                \n                <div>\n                  <Label className=\"text-sm font-medium\">Background Color</Label>\n                  <div className=\"flex gap-2 mt-1\">\n                    <Input\n                      type=\"color\"\n                      value={selectedLayerData.backgroundColor === 'transparent' ? '#ffffff' : selectedLayerData.backgroundColor}\n                      onChange={(e) => updateTextLayer(selectedLayerData.id, { backgroundColor: e.target.value })}\n                      className=\"h-10 flex-1\"\n                    />\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => updateTextLayer(selectedLayerData.id, { backgroundColor: 'transparent' })}\n                      className=\"px-3\"\n                    >\n                      Clear\n                    </Button>\n                  </div>\n                </div>\n                \n                <div>\n                  <Label className=\"text-sm font-medium\">Opacity: {Math.round(selectedLayerData.opacity * 100)}%</Label>\n                  <Slider\n                    value={[selectedLayerData.opacity]}\n                    onValueChange={([value]) => updateTextLayer(selectedLayerData.id, { opacity: value })}\n                    min={0}\n                    max={1}\n                    step={0.1}\n                    className=\"mt-2\"\n                  />\n                </div>\n                \n                <div>\n                  <Label className=\"text-sm font-medium\">Rotation: {selectedLayerData.rotation}°</Label>\n                  <Slider\n                    value={[selectedLayerData.rotation]}\n                    onValueChange={([value]) => updateTextLayer(selectedLayerData.id, { rotation: value })}\n                    min={-180}\n                    max={180}\n                    step={1}\n                    className=\"mt-2\"\n                  />\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Text Layers List */}\n      {textLayers.length > 0 && (\n        <Card>\n          <CardContent className=\"p-6\">\n            <h4 className=\"text-lg font-semibold mb-4 flex items-center\">\n              <i className=\"fas fa-layers text-indigo-600 mr-2\"></i>\n              Text Layers ({textLayers.length})\n            </h4>\n            <div className=\"space-y-2\">\n              {textLayers\n                .sort((a, b) => b.zIndex - a.zIndex)\n                .map(layer => (\n                <div\n                  key={layer.id}\n                  className={`p-4 border rounded-lg cursor-pointer transition-all duration-200 ${\n                    selectedLayer === layer.id \n                      ? 'border-blue-500 bg-blue-50 shadow-md' \n                      : 'border-gray-200 hover:border-gray-300 hover:shadow-sm'\n                  }`}\n                  onClick={() => setSelectedLayer(layer.id)}\n                  data-testid={`layer-item-${layer.id}`}\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex-1 mr-4\">\n                      <div className=\"font-medium text-slate-900 truncate\">\n                        {layer.text || 'Empty Text'}\n                      </div>\n                      <div className=\"text-sm text-slate-500 mt-1\">\n                        {layer.fontFamily} • {layer.fontSize}px • {layer.color}\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          updateTextLayer(layer.id, { isVisible: !layer.isVisible });\n                        }}\n                        className={`h-8 w-8 p-0 ${layer.isVisible ? 'text-green-600' : 'text-gray-400'}`}\n                      >\n                        <i className={`fas ${layer.isVisible ? 'fa-eye' : 'fa-eye-slash'}`}></i>\n                      </Button>\n                      {layer.isEdited && (\n                        <span className=\"text-xs bg-yellow-100 text-yellow-800 px-2 py-1 rounded\">\n                          Edited\n                        </span>\n                      )}\n                      <span className=\"text-xs bg-gray-100 text-gray-600 px-2 py-1 rounded font-mono\">\n                        Z:{layer.zIndex}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Export Settings */}\n      {cleanedImage && (\n        <Card>\n          <CardContent className=\"p-6\">\n            <h4 className=\"text-lg font-semibold mb-4 flex items-center\">\n              <i className=\"fas fa-download text-green-600 mr-2\"></i>\n              Export Settings\n            </h4>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div>\n                <Label className=\"text-sm font-medium\">Format</Label>\n                <Select value={exportFormat} onValueChange={(value: any) => setExportFormat(value)}>\n                  <SelectTrigger className=\"mt-1\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"png\">PNG (Lossless)</SelectItem>\n                    <SelectItem value=\"jpeg\">JPEG (Smaller file)</SelectItem>\n                    <SelectItem value=\"webp\">WebP (Modern)</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div>\n                <Label className=\"text-sm font-medium\">Quality: {Math.round(exportQuality * 100)}%</Label>\n                <Slider\n                  value={[exportQuality]}\n                  onValueChange={([value]) => setExportQuality(value)}\n                  min={0.1}\n                  max={1}\n                  step={0.1}\n                  className=\"mt-3\"\n                  disabled={exportFormat === 'png'}\n                />\n              </div>\n              \n              <div className=\"flex items-end\">\n                <Button \n                  onClick={handleExport}\n                  disabled={exportMutation.isPending}\n                  className=\"w-full bg-green-600 hover:bg-green-700\"\n                >\n                  {exportMutation.isPending ? (\n                    <>\n                      <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                      Exporting...\n                    </>\n                  ) : (\n                    <>\n                      <i className=\"fas fa-download mr-2\"></i>\n                      Download {exportFormat.toUpperCase()}\n                    </>\n                  )}\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n};\n\nexport default CanvaTextEditor;","size_bytes":31675},"client/src/components/interactive-text-overlay.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport type { TextRegion } from \"@shared/schema\";\n\ninterface InteractiveTextOverlayProps {\n  imageUrl: string;\n  textRegions: TextRegion[];\n  onTextRegionsChange: (regions: TextRegion[]) => void;\n  onApplyChanges: () => void;\n  modifiedImageUrl?: string;\n  isProcessing?: boolean;\n}\n\nconst InteractiveTextOverlay = ({ \n  imageUrl, \n  textRegions, \n  onTextRegionsChange,\n  onApplyChanges,\n  modifiedImageUrl,\n  isProcessing = false\n}: InteractiveTextOverlayProps) => {\n  const [selectedRegion, setSelectedRegion] = useState<string | null>(null);\n  const [editingRegion, setEditingRegion] = useState<string | null>(null);\n  const [tempText, setTempText] = useState(\"\");\n  const [imageDimensions, setImageDimensions] = useState({ width: 0, height: 0 });\n  const [displayDimensions, setDisplayDimensions] = useState({ width: 0, height: 0 });\n  const imageRef = useRef<HTMLImageElement>(null);\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const img = new Image();\n    img.onload = () => {\n      setImageDimensions({ width: img.width, height: img.height });\n    };\n    img.src = imageUrl;\n  }, [imageUrl]);\n\n  useEffect(() => {\n    const updateDisplayDimensions = () => {\n      if (imageRef.current) {\n        const rect = imageRef.current.getBoundingClientRect();\n        setDisplayDimensions({ width: rect.width, height: rect.height });\n      }\n    };\n\n    updateDisplayDimensions();\n    window.addEventListener('resize', updateDisplayDimensions);\n    return () => window.removeEventListener('resize', updateDisplayDimensions);\n  }, [imageDimensions]);\n\n  const scaleX = displayDimensions.width / imageDimensions.width || 1;\n  const scaleY = displayDimensions.height / imageDimensions.height || 1;\n\n  const handleRegionClick = (region: TextRegion, e: React.MouseEvent) => {\n    e.stopPropagation();\n    if (selectedRegion === region.id) {\n      // If already selected, start editing\n      setEditingRegion(region.id);\n      setTempText(region.text);\n      setSelectedRegion(null);\n    } else {\n      // Select the region\n      setSelectedRegion(region.id);\n      setEditingRegion(null);\n    }\n  };\n\n  const handleRegionDoubleClick = (region: TextRegion, e: React.MouseEvent) => {\n    e.stopPropagation();\n    setEditingRegion(region.id);\n    setTempText(region.text);\n    setSelectedRegion(null);\n  };\n\n  const handleTextSave = (regionId: string) => {\n    const updatedRegions = textRegions.map(region =>\n      region.id === regionId \n        ? { \n            ...region, \n            text: tempText, \n            isEdited: tempText !== region.originalText \n          } \n        : region\n    );\n    onTextRegionsChange(updatedRegions);\n    setEditingRegion(null);\n    setTempText(\"\");\n  };\n\n  const handleTextCancel = () => {\n    setEditingRegion(null);\n    setTempText(\"\");\n  };\n\n  const handleRegionToggle = (regionId: string) => {\n    const updatedRegions = textRegions.map(region =>\n      region.id === regionId ? { ...region, isVisible: !region.isVisible } : region\n    );\n    onTextRegionsChange(updatedRegions);\n  };\n\n  const handleRegionDelete = (regionId: string) => {\n    const updatedRegions = textRegions.map(region =>\n      region.id === regionId ? { ...region, isDeleted: true, isVisible: false } : region\n    );\n    onTextRegionsChange(updatedRegions);\n    setSelectedRegion(null);\n    setEditingRegion(null);\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent, regionId: string) => {\n    if (e.key === 'Enter') {\n      handleTextSave(regionId);\n    } else if (e.key === 'Escape') {\n      handleTextCancel();\n    }\n  };\n\n  const handleContainerClick = () => {\n    setSelectedRegion(null);\n    setEditingRegion(null);\n  };\n\n  return (\n    <div className=\"relative\">\n      {/* Image with overlay */}\n      <div ref={containerRef} className=\"relative inline-block\" onClick={handleContainerClick}>\n        <img\n          ref={imageRef}\n          src={imageUrl}\n          alt=\"OCR Image\"\n          className=\"max-w-full h-auto rounded-lg shadow-md\"\n          draggable={false}\n          data-testid=\"ocr-image-with-overlay\"\n        />\n        \n        {/* Text region overlays */}\n        {displayDimensions.width > 0 && textRegions.map((region) => (\n          <div key={region.id}>\n            {/* Text region box */}\n            <div\n              className={`absolute border-2 cursor-pointer transition-all ${\n                selectedRegion === region.id\n                  ? 'border-blue-600 bg-blue-200 bg-opacity-70 shadow-lg'\n                  : editingRegion === region.id\n                  ? 'border-orange-500 bg-orange-100 bg-opacity-50'\n                  : region.isDeleted\n                  ? 'border-red-600 bg-red-200 bg-opacity-80 opacity-60'\n                  : region.isEdited\n                  ? 'border-yellow-500 bg-yellow-100 bg-opacity-60 hover:bg-yellow-200'\n                  : region.isVisible \n                  ? 'border-green-500 bg-green-100 bg-opacity-40 hover:bg-green-200 hover:bg-opacity-60'\n                  : 'border-red-500 bg-red-100 bg-opacity-40 opacity-50'\n              }`}\n              style={{\n                left: `${region.x * scaleX}px`,\n                top: `${region.y * scaleY}px`,\n                width: `${region.width * scaleX}px`,\n                height: `${region.height * scaleY}px`,\n              }}\n              onClick={(e) => handleRegionClick(region, e)}\n              onDoubleClick={(e) => handleRegionDoubleClick(region, e)}\n              data-testid={`text-region-${region.id}`}\n            />\n            \n            {/* Editable text input */}\n            {editingRegion === region.id && (\n              <div\n                className=\"absolute z-10\"\n                style={{\n                  left: `${region.x * scaleX}px`,\n                  top: `${(region.y + region.height) * scaleY + 5}px`,\n                  minWidth: `${Math.max(region.width * scaleX, 150)}px`,\n                }}\n              >\n                <div className=\"bg-white border-2 border-blue-500 rounded-md shadow-lg p-2\">\n                  <Input\n                    value={tempText}\n                    onChange={(e) => setTempText(e.target.value)}\n                    onKeyDown={(e) => handleKeyPress(e, region.id)}\n                    className=\"mb-2 text-sm\"\n                    autoFocus\n                    data-testid={`edit-input-${region.id}`}\n                  />\n                  <div className=\"flex gap-1\">\n                    <Button\n                      size=\"sm\"\n                      onClick={() => handleTextSave(region.id)}\n                      className=\"text-xs px-2 py-1\"\n                      data-testid={`save-button-${region.id}`}\n                    >\n                      Save\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      variant=\"ghost\"\n                      onClick={handleTextCancel}\n                      className=\"text-xs px-2 py-1\"\n                      data-testid={`cancel-button-${region.id}`}\n                    >\n                      Cancel\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            )}\n            \n            {/* Text label */}\n            {region.isVisible && editingRegion !== region.id && (\n              <div\n                className=\"absolute text-xs bg-white bg-opacity-90 px-1 py-0.5 rounded border pointer-events-none\"\n                style={{\n                  left: `${region.x * scaleX}px`,\n                  top: `${region.y * scaleY - 20}px`,\n                  maxWidth: `${region.width * scaleX}px`,\n                }}\n              >\n                <span className=\"truncate block\">{region.text}</span>\n              </div>\n            )}\n          </div>\n        ))}\n\n        {/* Modified image overlay */}\n        {modifiedImageUrl && (\n          <div className=\"absolute top-0 right-0 m-4 max-w-md bg-white bg-opacity-95 backdrop-blur-sm rounded-lg shadow-lg border-2 border-green-500\">\n            <div className=\"p-4\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <h4 className=\"font-semibold text-green-700 text-sm\">\n                  <i className=\"fas fa-check-circle mr-2\"></i>Modified Image\n                </h4>\n                <div className=\"flex gap-1\">\n                  <Button\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    className=\"h-6 w-6 p-1\"\n                    onClick={() => {\n                      const element = document.createElement(\"a\");\n                      element.href = modifiedImageUrl;\n                      element.download = \"modified_image.jpg\";\n                      document.body.appendChild(element);\n                      element.click();\n                      document.body.removeChild(element);\n                    }}\n                    data-testid=\"download-modified-image\"\n                  >\n                    <i className=\"fas fa-download text-xs\"></i>\n                  </Button>\n                </div>\n              </div>\n              <img \n                src={modifiedImageUrl} \n                alt=\"Modified image\" \n                className=\"w-full rounded border\"\n              />\n              <div className=\"mt-2 text-xs text-green-600 text-center\">\n                Changes applied to original image\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Control panel */}\n      <div className=\"mt-4 p-4 bg-slate-50 rounded-lg\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"font-semibold text-slate-900\">\n            <i className=\"fas fa-edit mr-2 text-blue-600\"></i>\n            Interactive Text Editor\n          </h3>\n          <Button \n            onClick={onApplyChanges}\n            disabled={isProcessing}\n            className=\"bg-green-600 hover:bg-green-700 disabled:opacity-50\"\n            data-testid=\"apply-changes-button\"\n          >\n            {isProcessing ? (\n              <>\n                <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                Processing Image...\n              </>\n            ) : (\n              <>\n                <i className=\"fas fa-magic mr-2\"></i>\n                Apply Changes to Image\n              </>\n            )}\n          </Button>\n        </div>\n        \n        <div className=\"text-sm text-slate-600 mb-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div>\n              <strong>Instructions:</strong>\n              <ul className=\"mt-1 space-y-1\">\n                <li>• <strong>Click once</strong> to select a text region</li>\n                <li>• <strong>Click again</strong> on selected region to edit text</li>\n                <li>• <strong>Delete:</strong> Remove text completely from image</li>\n                <li>• <strong>Apply Changes:</strong> Process image with modifications</li>\n              </ul>\n            </div>\n            <div>\n              <strong>Legend:</strong>\n              <ul className=\"mt-1 space-y-1\">\n                <li><span className=\"inline-block w-3 h-3 bg-green-200 border border-green-500 mr-2\"></span>Original text</li>\n                <li><span className=\"inline-block w-3 h-3 bg-yellow-200 border border-yellow-500 mr-2\"></span>Edited text</li>\n                <li><span className=\"inline-block w-3 h-3 bg-red-200 border border-red-600 mr-2\"></span>Deleted text</li>\n                <li><span className=\"inline-block w-3 h-3 bg-blue-200 border border-blue-500 mr-2\"></span>Selected</li>\n              </ul>\n            </div>\n            <div>\n              <strong>Stats:</strong>\n              <ul className=\"mt-1 space-y-1\">\n                <li>Total regions: {textRegions.length}</li>\n                <li>Original: {textRegions.filter(r => !r.isEdited && !r.isDeleted).length}</li>\n                <li>Edited: {textRegions.filter(r => r.isEdited && !r.isDeleted).length}</li>\n                <li>Deleted: {textRegions.filter(r => r.isDeleted).length}</li>\n              </ul>\n            </div>\n          </div>\n        </div>\n\n        {/* Selected region controls */}\n        {selectedRegion && (\n          <div className=\"border-t pt-4\">\n            <h4 className=\"font-medium text-slate-900 mb-2\">Selected Region Actions</h4>\n            <div className=\"flex gap-2\">\n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                onClick={() => {\n                  const region = textRegions.find(r => r.id === selectedRegion);\n                  if (region) {\n                    setEditingRegion(region.id);\n                    setTempText(region.text);\n                    setSelectedRegion(null);\n                  }\n                }}\n                data-testid=\"edit-selected-region\"\n              >\n                <i className=\"fas fa-edit mr-1\"></i>Edit\n              </Button>\n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                onClick={() => handleRegionToggle(selectedRegion)}\n                data-testid=\"toggle-selected-region\"\n              >\n                <i className={`fas ${textRegions.find(r => r.id === selectedRegion)?.isVisible ? 'fa-eye-slash' : 'fa-eye'} mr-1`}></i>\n                {textRegions.find(r => r.id === selectedRegion)?.isVisible ? 'Hide' : 'Show'}\n              </Button>\n              <Button\n                size=\"sm\"\n                variant=\"destructive\"\n                onClick={() => handleRegionDelete(selectedRegion)}\n                data-testid=\"delete-selected-region\"\n              >\n                <i className=\"fas fa-trash mr-1\"></i>Delete\n              </Button>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default InteractiveTextOverlay;","size_bytes":13942},"client/src/components/mobile-menu.tsx":{"content":"import { Link } from \"wouter\";\n\ninterface NavItem {\n  path: string;\n  label: string;\n  icon: string;\n}\n\ninterface MobileMenuProps {\n  isOpen: boolean;\n  onClose: () => void;\n  navItems: NavItem[];\n  currentLocation: string;\n}\n\nconst MobileMenu = ({ isOpen, onClose, navItems, currentLocation }: MobileMenuProps) => {\n  if (!isOpen) return null;\n\n  const isActive = (path: string) => {\n    if (path === \"/\" && currentLocation === \"/\") return true;\n    if (path !== \"/\" && currentLocation.startsWith(path)) return true;\n    return false;\n  };\n\n  return (\n    <div className=\"md:hidden pb-4\">\n      <div className=\"space-y-1\">\n        {navItems.map((item) => (\n          <Link\n            key={item.path}\n            href={item.path}\n            onClick={onClose}\n            data-testid={`mobile-nav-link-${item.label.toLowerCase().replace(/\\s+/g, '-')}`}\n            className={`block px-3 py-2 rounded-md text-base font-medium ${\n              isActive(item.path)\n                ? \"text-slate-900\"\n                : \"text-slate-600 hover:text-blue-600\"\n            }`}\n          >\n            <i className={`${item.icon} mr-3`}></i>\n            {item.label}\n          </Link>\n        ))}\n        <Link\n          href=\"/premium\"\n          onClick={onClose}\n          data-testid=\"mobile-nav-link-premium\"\n          className=\"bg-gradient-to-r from-blue-600 to-blue-700 text-white block px-3 py-2 rounded-md text-base font-medium mt-2\"\n        >\n          <i className=\"fas fa-crown mr-3\"></i>\n          Premium\n        </Link>\n      </div>\n    </div>\n  );\n};\n\nexport default MobileMenu;\n","size_bytes":1587},"client/src/components/navigation.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { useState } from \"react\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\nimport { useAuth, useUsage } from \"@/hooks/useAuth\";\nimport { AuthModal } from \"./auth-modal\";\nimport { PremiumUpgradeModal } from \"./premium-upgrade-modal\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { User, LogOut, Crown, Zap } from \"lucide-react\";\nimport MobileMenu from \"./mobile-menu\";\n\nconst Navigation = () => {\n  const [location] = useLocation();\n  const isMobile = useIsMobile();\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n  const [authModalOpen, setAuthModalOpen] = useState(false);\n  const [upgradeModalOpen, setUpgradeModalOpen] = useState(false);\n  \n  const { user, logout, isAuthenticated, isLoading } = useAuth();\n  const { data: usage } = useUsage();\n\n  const navItems = [\n    { path: \"/\", label: \"Home\", icon: \"fas fa-home\" },\n  ];\n\n  const isActive = (path: string) => {\n    if (path === \"/\" && location === \"/\") return true;\n    if (path !== \"/\" && location.startsWith(path)) return true;\n    return false;\n  };\n\n  return (\n    <nav className=\"bg-white shadow-sm border-b border-slate-200 sticky top-0 z-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          {/* Logo */}\n          <div className=\"flex items-center\">\n            <div className=\"flex-shrink-0 flex items-center\">\n              <svg width=\"32\" height=\"32\" viewBox=\"0 0 80 80\" className=\"mr-3\">\n                <defs>\n                  <linearGradient id=\"navLogoGradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\n                    <stop offset=\"0%\" stopColor=\"#3B82F6\" />\n                    <stop offset=\"100%\" stopColor=\"#8B5CF6\" />\n                  </linearGradient>\n                </defs>\n                <rect width=\"80\" height=\"80\" rx=\"16\" fill=\"url(#navLogoGradient)\" />\n                <rect x=\"12\" y=\"12\" width=\"56\" height=\"42\" rx=\"4\" fill=\"white\" opacity=\"0.9\" />\n                <rect x=\"16\" y=\"16\" width=\"12\" height=\"2\" rx=\"1\" fill=\"#3B82F6\" />\n                <rect x=\"16\" y=\"20\" width=\"20\" height=\"2\" rx=\"1\" fill=\"#3B82F6\" />\n                <rect x=\"16\" y=\"24\" width=\"16\" height=\"2\" rx=\"1\" fill=\"#3B82F6\" />\n                <rect x=\"16\" y=\"28\" width=\"24\" height=\"2\" rx=\"1\" fill=\"#3B82F6\" />\n                <rect x=\"16\" y=\"32\" width=\"18\" height=\"2\" rx=\"1\" fill=\"#3B82F6\" />\n                <rect x=\"16\" y=\"36\" width=\"14\" height=\"2\" rx=\"1\" fill=\"#3B82F6\" />\n                <rect x=\"16\" y=\"40\" width=\"22\" height=\"2\" rx=\"1\" fill=\"#3B82F6\" />\n                <rect x=\"16\" y=\"44\" width=\"20\" height=\"2\" rx=\"1\" fill=\"#3B82F6\" />\n                <path d=\"M20 58 L32 66 L44 58 L56 66\" stroke=\"white\" strokeWidth=\"3\" fill=\"none\" strokeLinecap=\"round\" />\n                <circle cx=\"24\" cy=\"62\" r=\"2\" fill=\"white\" />\n                <circle cx=\"36\" cy=\"62\" r=\"2\" fill=\"white\" />\n                <circle cx=\"48\" cy=\"62\" r=\"2\" fill=\"white\" />\n              </svg>\n              <span className=\"font-bold text-xl bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">PictoText</span>\n            </div>\n          </div>\n\n          {/* Desktop Navigation */}\n          {!isMobile && (\n            <div className=\"flex items-center space-x-4\">\n              {/* Navigation Links */}\n              <div className=\"flex items-baseline space-x-4\">\n                {navItems.map((item) => (\n                  <Link\n                    key={item.path}\n                    href={item.path}\n                    data-testid={`nav-link-${item.label.toLowerCase().replace(/\\s+/g, '-')}`}\n                    className={`px-3 py-2 rounded-md text-sm font-medium transition-colors ${\n                      isActive(item.path)\n                        ? \"text-slate-900\"\n                        : \"text-slate-600 hover:text-blue-600\"\n                    }`}\n                  >\n                    <i className={`${item.icon} mr-2`}></i>\n                    {item.label}\n                  </Link>\n                ))}\n                <Link\n                  href=\"/premium\"\n                  data-testid=\"nav-link-premium\"\n                  className=\"bg-gradient-to-r from-blue-600 to-blue-700 text-white px-4 py-2 rounded-md text-sm font-medium hover:from-blue-700 hover:to-blue-800 transition-all\"\n                >\n                  <Crown className=\"w-4 h-4 mr-2\" />\n                  Premium\n                </Link>\n              </div>\n\n              {/* Authentication Section */}\n              <div className=\"flex items-center space-x-3 border-l border-slate-200 pl-4\">\n                {isLoading ? (\n                  <div className=\"animate-pulse bg-slate-200 h-8 w-20 rounded\"></div>\n                ) : isAuthenticated && user ? (\n                  <div className=\"flex items-center space-x-3\">\n                    {/* Usage Badge for Free Users */}\n                    {!user.isPremium && usage && (\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        {usage.imageCount}/{usage.dailyLimit} images\n                      </Badge>\n                    )}\n                    \n                    {/* Premium Badge */}\n                    {user.isPremium && (\n                      <Badge className=\"bg-gradient-to-r from-amber-400 to-amber-600 text-white\">\n                        <Crown className=\"w-3 h-3 mr-1\" />\n                        Premium\n                      </Badge>\n                    )}\n\n                    {/* User Menu */}\n                    <DropdownMenu>\n                      <DropdownMenuTrigger asChild>\n                        <Button variant=\"ghost\" size=\"sm\" data-testid=\"user-menu-trigger\">\n                          <User className=\"w-4 h-4 mr-2\" />\n                          {user.username}\n                        </Button>\n                      </DropdownMenuTrigger>\n                      <DropdownMenuContent align=\"end\">\n                        <DropdownMenuItem disabled className=\"font-medium\">\n                          {user.email}\n                        </DropdownMenuItem>\n                        <DropdownMenuSeparator />\n                        {!user.isPremium && (\n                          <DropdownMenuItem \n                            onClick={() => setUpgradeModalOpen(true)}\n                            data-testid=\"menu-upgrade\"\n                          >\n                            <Zap className=\"w-4 h-4 mr-2\" />\n                            Upgrade to Premium\n                          </DropdownMenuItem>\n                        )}\n                        <DropdownMenuItem \n                          onClick={logout}\n                          data-testid=\"menu-logout\"\n                        >\n                          <LogOut className=\"w-4 h-4 mr-2\" />\n                          Sign Out\n                        </DropdownMenuItem>\n                      </DropdownMenuContent>\n                    </DropdownMenu>\n                  </div>\n                ) : (\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\" \n                    onClick={() => setAuthModalOpen(true)}\n                    data-testid=\"button-sign-in\"\n                  >\n                    <User className=\"w-4 h-4 mr-2\" />\n                    Premium Sign In\n                  </Button>\n                )}\n              </div>\n            </div>\n          )}\n\n          {/* Mobile menu button */}\n          {isMobile && (\n            <div>\n              <button\n                onClick={() => setMobileMenuOpen(!mobileMenuOpen)}\n                data-testid=\"mobile-menu-button\"\n                className=\"text-slate-600 hover:text-slate-900 focus:outline-none focus:text-slate-900 p-2\"\n              >\n                <i className=\"fas fa-bars text-xl\"></i>\n              </button>\n            </div>\n          )}\n        </div>\n\n        {/* Mobile Navigation */}\n        <MobileMenu \n          isOpen={mobileMenuOpen} \n          onClose={() => setMobileMenuOpen(false)}\n          navItems={navItems}\n          currentLocation={location}\n        />\n      </div>\n\n      {/* Authentication Modal */}\n      <AuthModal \n        isOpen={authModalOpen}\n        onClose={() => setAuthModalOpen(false)}\n      />\n\n      {/* Premium Upgrade Modal */}\n      <PremiumUpgradeModal\n        isOpen={upgradeModalOpen}\n        onClose={() => setUpgradeModalOpen(false)}\n        currentUsage={usage}\n      />\n    </nav>\n  );\n};\n\nexport default Navigation;\n","size_bytes":8714},"client/src/components/photo-extractor.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport CanvaTextEditor from \"./canva-text-editor\";\nimport type { OCRRequest, OCRResponse, TextRegion, TextLayer, TextLine } from \"@shared/schema\";\n\nconst PhotoExtractor = () => {\n  const [selectedImage, setSelectedImage] = useState<File | null>(null);\n  const [imagePreview, setImagePreview] = useState<string>(\"\");\n  const [extractedText, setExtractedText] = useState(\"\");\n  const [textRegions, setTextRegions] = useState<TextRegion[]>([]);\n  const [textLines, setTextLines] = useState<TextLine[]>([]);\n  const [showResult, setShowResult] = useState(false);\n  const [showAdvancedEditor, setShowAdvancedEditor] = useState(false);\n  const [confidence, setConfidence] = useState(0);\n  const [wordCount, setWordCount] = useState(0);\n  const [textLayers, setTextLayers] = useState<TextLayer[]>([]);\n  const [cleanedImage, setCleanedImage] = useState<string>(\"\");\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const { toast } = useToast();\n\n  // Auto-inpainting mutation for seamless workflow\n  const autoInpaintMutation = useMutation({\n    mutationFn: async ({ originalImage, textLines, textRegions }: { originalImage: string; textLines?: TextLine[]; textRegions: TextRegion[] }) => {\n      const response = await fetch(\"/api/inpaint-image\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          originalImage,\n          textLines: textLines,\n          textRegions: textRegions,\n          maskExpansion: 4,\n          maskFeather: 3,\n          useAdvancedInpainting: true,\n        }),\n      });\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      return await response.json();\n    },\n    onSuccess: (data) => {\n      if (data.success) {\n        setCleanedImage(data.cleanedImage);\n        toast({\n          title: \"Text extraction complete!\",\n          description: \"Your editable text elements are ready. You can now move, style, and edit each text element independently.\",\n        });\n      } else {\n        toast({\n          title: \"Processing failed\",\n          description: data.error || \"Failed to process the image.\",\n          variant: \"destructive\",\n        });\n      }\n    },\n    onError: (error) => {\n      toast({\n        title: \"Processing error\",\n        description: \"An error occurred while creating editable text. Please try again.\",\n        variant: \"destructive\",\n      });\n      console.error(\"Auto-inpainting error:\", error);\n    },\n  });\n\n  const triggerAutoInpainting = (ocrData: OCRResponse) => {\n    if (!imagePreview) return;\n    \n    autoInpaintMutation.mutate({\n      originalImage: imagePreview,\n      textLines: ocrData.textLines,\n      textRegions: ocrData.textRegions || [],\n    });\n  };\n\n  const extractTextMutation = useMutation({\n    mutationFn: async (ocrRequest: OCRRequest): Promise<OCRResponse> => {\n      const response = await fetch(\"/api/extract-text\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(ocrRequest),\n      });\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      return await response.json();\n    },\n    onSuccess: (data: OCRResponse) => {\n      if (data.success) {\n        setExtractedText(data.text);\n        setTextRegions(data.textRegions || []);\n        setTextLines(data.textLines || []);\n        setConfidence(data.confidence);\n        setWordCount(data.words);\n        setShowResult(true);\n        \n        // Enable Canva-style editor if we have text lines or regions with coordinates\n        const hasTextData = (data.textLines && data.textLines.length > 0) || \n                           (data.textRegions && data.textRegions.length > 0);\n        \n        if (hasTextData) {\n          setShowAdvancedEditor(true);\n          const lineCount = data.textLines?.length || 0;\n          \n          toast({\n            title: \"Text detected, creating editable version...\",\n            description: `Found ${data.words} words in ${lineCount > 0 ? `${lineCount} lines` : `${data.textRegions?.length || 0} regions`}. Processing...`,\n          });\n          \n          // Automatically trigger inpainting process\n          setTimeout(() => {\n            triggerAutoInpainting(data);\n          }, 500);\n        } else {\n          setShowAdvancedEditor(false);\n          toast({\n            title: \"Text extraction complete\",\n            description: `Successfully extracted ${data.words} words from your image.`,\n          });\n        }\n      } else {\n        toast({\n          title: \"Extraction failed\",\n          description: data.error || \"Failed to extract text from the image.\",\n          variant: \"destructive\",\n        });\n      }\n    },\n    onError: (error) => {\n      toast({\n        title: \"Extraction error\",\n        description: \"An error occurred while processing your image. Please try again.\",\n        variant: \"destructive\",\n      });\n      console.error(\"OCR extraction error:\", error);\n    },\n  });\n\n\n\n  const handleFileSelect = (file: File | null) => {\n    if (!file) return;\n\n    // Validate file type\n    const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp', 'image/avif'];\n    if (!allowedTypes.includes(file.type)) {\n      toast({\n        title: \"Invalid file type\",\n        description: \"Please select a JPG, PNG, WebP, or AVIF image.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Validate file size (10MB limit)\n    const maxSize = 10 * 1024 * 1024;\n    if (file.size > maxSize) {\n      toast({\n        title: \"File too large\",\n        description: \"Please select an image smaller than 10MB.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setSelectedImage(file);\n    setShowResult(false);\n    setExtractedText(\"\");\n    setTextRegions([]);\n    setShowAdvancedEditor(false);\n    setTextLayers([]);\n\n    // Create optimized preview\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      if (e.target?.result) {\n        optimizeImage(e.target.result as string);\n      }\n    };\n    reader.readAsDataURL(file);\n  };\n\n  const optimizeImage = (originalDataUrl: string) => {\n    const img = new Image();\n    img.onload = () => {\n      const canvas = document.createElement('canvas');\n      const ctx = canvas.getContext('2d');\n      \n      // Calculate new dimensions (max 1920px width)\n      let { width, height } = img;\n      const maxWidth = 1920;\n      \n      if (width > maxWidth) {\n        height = (height * maxWidth) / width;\n        width = maxWidth;\n      }\n      \n      canvas.width = width;\n      canvas.height = height;\n      \n      // Draw and compress\n      ctx?.drawImage(img, 0, 0, width, height);\n      const optimizedDataUrl = canvas.toDataURL('image/jpeg', 0.8);\n      setImagePreview(optimizedDataUrl);\n    };\n    img.src = originalDataUrl;\n  };\n\n  const handleTextRegionsChange = (regions: TextRegion[]) => {\n    setTextRegions(regions);\n  };\n\n  const handleApplyChanges = () => {\n    if (!imagePreview) {\n      toast({\n        title: \"No image selected\",\n        description: \"Please select an image first.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const changedRegions = textRegions.filter(region => region.isDeleted || region.isEdited);\n    \n    if (changedRegions.length === 0) {\n      toast({\n        title: \"No changes to apply\",\n        description: \"Please edit or delete some text regions first.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const imageEditRequest: ImageEditRequest = {\n      originalImage: imagePreview,\n      textRegions: textRegions,\n    };\n\n    editImageMutation.mutate(imageEditRequest);\n  };\n\n  const handleDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n  };\n\n  const handleDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    const files = Array.from(e.dataTransfer.files);\n    if (files.length > 0) {\n      handleFileSelect(files[0]);\n    }\n  };\n\n  const handleExtractText = async () => {\n    if (!selectedImage || !imagePreview) return;\n\n    const ocrRequest: OCRRequest = {\n      image: imagePreview,\n      language: \"eng\",\n      isTable: false,\n    };\n\n    extractTextMutation.mutate(ocrRequest);\n  };\n\n  const handleClearImage = () => {\n    setSelectedImage(null);\n    setImagePreview(\"\");\n    setExtractedText(\"\");\n    setTextRegions([]);\n    setTextLines([]);\n    setShowResult(false);\n    setShowAdvancedEditor(false);\n    setTextLayers([]);\n    setCleanedImage(\"\");\n    setConfidence(0);\n    setWordCount(0);\n    if (fileInputRef.current) {\n      fileInputRef.current.value = \"\";\n    }\n  };\n\n  const copyToClipboard = () => {\n    navigator.clipboard.writeText(extractedText);\n    toast({\n      title: \"Copied to clipboard\",\n      description: \"The extracted text has been copied to your clipboard.\",\n    });\n  };\n\n  if (!selectedImage && !showResult) {\n    return (\n      <Card className=\"w-full max-w-4xl mx-auto\">\n        <CardContent className=\"p-8\">\n          <div \n            className=\"border-2 border-dashed border-slate-300 rounded-2xl p-12 text-center cursor-pointer transition-all hover:border-blue-400 hover:bg-blue-50\"\n            onDragOver={handleDragOver}\n            onDrop={handleDrop}\n            onClick={() => fileInputRef.current?.click()}\n            data-testid=\"photo-upload-zone\"\n          >\n            <div className=\"mb-6\">\n              <i className=\"fas fa-camera text-6xl text-slate-400\"></i>\n            </div>\n            <h3 className=\"text-2xl font-semibold text-slate-700 mb-4\">Upload Image for Text Extraction</h3>\n            <p className=\"text-slate-500 mb-6\">\n              Drag and drop your image here, or click to browse\n            </p>\n            <p className=\"text-sm text-slate-400 mb-6\">\n              Supports JPG, PNG, WebP, and AVIF formats (max 10MB)\n            </p>\n            <Button className=\"bg-blue-600 hover:bg-blue-700\" data-testid=\"button-choose-photo\">\n              <i className=\"fas fa-image mr-2\"></i>Choose Photo\n            </Button>\n          </div>\n          <input\n            ref={fileInputRef}\n            type=\"file\"\n            className=\"hidden\"\n            accept=\"image/jpeg,image/jpg,image/png,image/webp,image/avif\"\n            onChange={(e) => handleFileSelect(e.target.files?.[0] || null)}\n            data-testid=\"file-input-photo\"\n          />\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"w-full max-w-7xl mx-auto space-y-6\">\n      {/* Image Preview and Controls */}\n      {selectedImage && !showResult && (\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <h3 className=\"text-lg font-semibold text-slate-900\">\n                <i className=\"fas fa-image text-blue-600 mr-2\"></i>Image Preview\n              </h3>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={handleClearImage}\n                data-testid=\"button-clear-image\"\n              >\n                <i className=\"fas fa-times mr-2\"></i>Clear\n              </Button>\n            </div>\n            \n            <div className=\"flex flex-col lg:flex-row gap-6\">\n              {/* Image Preview */}\n              <div className=\"flex-1\">\n                <div className=\"bg-slate-100 rounded-lg p-4 flex items-center justify-center\">\n                  <img\n                    src={imagePreview}\n                    alt=\"Selected image\"\n                    className=\"max-w-full max-h-96 object-contain rounded-lg shadow-md\"\n                    data-testid=\"image-preview\"\n                  />\n                </div>\n                <div className=\"mt-4 text-sm text-slate-600 text-center\">\n                  <i className=\"fas fa-info-circle mr-1\"></i>\n                  {selectedImage.name} ({(selectedImage.size / 1024 / 1024).toFixed(2)} MB)\n                </div>\n              </div>\n\n              {/* Extract Button */}\n              <div className=\"lg:w-80 flex flex-col justify-center\">\n                <div className=\"bg-slate-50 rounded-lg p-6 text-center\">\n                  <div className=\"mb-4\">\n                    <i className=\"fas fa-magic text-4xl text-blue-600\"></i>\n                  </div>\n                  <h4 className=\"text-lg font-semibold text-slate-900 mb-2\">Ready to Extract</h4>\n                  <p className=\"text-slate-600 text-sm mb-6\">\n                    Click the button below to extract text from your image using advanced OCR technology.\n                  </p>\n                  <Button \n                    onClick={handleExtractText}\n                    disabled={extractTextMutation.isPending}\n                    className=\"w-full bg-blue-600 hover:bg-blue-700\"\n                    data-testid=\"button-extract-text\"\n                  >\n                    {extractTextMutation.isPending ? (\n                      <>\n                        <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                        Extracting...\n                      </>\n                    ) : (\n                      <>\n                        <i className=\"fas fa-magic mr-2\"></i>Extract Text\n                      </>\n                    )}\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Results View */}\n      {showResult && (\n        <div className=\"space-y-6\">\n          {/* Simple Text Display */}\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <h3 className=\"text-lg font-semibold text-slate-900\">\n                  <i className=\"fas fa-file-text text-green-600 mr-2\"></i>Extracted Text\n                </h3>\n                <div className=\"flex gap-2\">\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={copyToClipboard}\n                    disabled={!extractedText}\n                    data-testid=\"button-copy-text\"\n                  >\n                    <i className=\"fas fa-copy\"></i>\n                  </Button>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => {\n                      const element = document.createElement(\"a\");\n                      const file = new Blob([extractedText], { type: 'text/plain' });\n                      element.href = URL.createObjectURL(file);\n                      element.download = \"extracted_text.txt\";\n                      document.body.appendChild(element);\n                      element.click();\n                      document.body.removeChild(element);\n                    }}\n                    disabled={!extractedText}\n                    data-testid=\"button-download-text\"\n                  >\n                    <i className=\"fas fa-download\"></i>\n                  </Button>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={handleClearImage}\n                    data-testid=\"button-start-over\"\n                  >\n                    <i className=\"fas fa-plus mr-2\"></i>Upload New\n                  </Button>\n                </div>\n              </div>\n              <Textarea\n                className=\"min-h-48 resize-none font-mono\"\n                placeholder=\"Extracted text will appear here...\"\n                value={extractedText}\n                onChange={(e) => setExtractedText(e.target.value)}\n                data-testid=\"extracted-text-output\"\n              />\n              <div className=\"mt-4 p-3 bg-green-50 rounded-lg\">\n                <div className=\"flex items-center justify-between text-sm text-green-800 mb-2\">\n                  <span className=\"flex items-center\">\n                    <i className=\"fas fa-check-circle mr-2\"></i>\n                    Text extraction completed successfully\n                  </span>\n                  <span className=\"font-semibold\">{wordCount} words</span>\n                </div>\n                {confidence > 0 && (\n                  <div className=\"flex items-center justify-between text-sm text-green-700\">\n                    <span>Confidence Score</span>\n                    <span className=\"font-semibold\">{confidence.toFixed(1)}%</span>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Canva-Style Text Editor */}\n          {showAdvancedEditor && textRegions.length > 0 && (\n            <CanvaTextEditor\n              originalImage={imagePreview}\n              textRegions={textRegions}\n              textLines={textLines}\n              cleanedImage={cleanedImage}\n              onTextLayersChange={setTextLayers}\n            />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default PhotoExtractor;","size_bytes":17346},"client/src/components/simple-text-extractor.tsx":{"content":"import React, { useState, useCallback, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { useAuth, useUsage } from \"@/hooks/useAuth\";\nimport { AuthModal } from \"./auth-modal\";\nimport { PaymentModal } from \"./payment-modal\";\nimport { PremiumUpgradeModal } from \"./premium-upgrade-modal\";\nimport { \n  Upload, \n  FileImage, \n  Loader2, \n  CheckCircle, \n  XCircle, \n  Copy, \n  Download,\n  Zap,\n  Crown,\n  LogOut\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface ExtractionResult {\n  extractedText: string;\n  confidence: number;\n  wordCount: number;\n  rawText?: string;\n}\n\nexport default function SimpleTextExtractor() {\n  const { user, isAuthenticated, logout, isLoading: authLoading } = useAuth();\n  const { data: usage, refetch: refetchUsage } = useUsage();\n  const { toast } = useToast();\n\n  // Modal states\n  const [showAuthModal, setShowAuthModal] = useState(false);\n  const [showPaymentModal, setShowPaymentModal] = useState(false);\n  const [showUpgradeModal, setShowUpgradeModal] = useState(false);\n  \n  // UI states\n  const [file, setFile] = useState<File | null>(null);\n  const [imagePreview, setImagePreview] = useState<string | null>(null);\n  const [extractedText, setExtractedText] = useState(\"\");\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [processingProgress, setProcessingProgress] = useState(0);\n  const [result, setResult] = useState<ExtractionResult | null>(null);\n  const [useFiltering, setUseFiltering] = useState(true);\n\n  // Store email from OAuth redirect\n  const [oauthEmail, setOauthEmail] = useState<string | null>(null);\n\n  // Check URL parameters for OAuth payment redirect\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    if (urlParams.get('payment') === 'required') {\n      const email = urlParams.get('email');\n      if (email) {\n        setOauthEmail(decodeURIComponent(email));\n        setShowPaymentModal(true);\n        // Clear URL parameters\n        window.history.replaceState({}, document.title, window.location.pathname);\n        toast({\n          title: \"Payment Required\",\n          description: \"Complete your premium subscription to access your account.\",\n          variant: \"default\",\n        });\n      }\n    }\n  }, [toast]);\n\n  const handleFileSelect = useCallback((selectedFile: File) => {\n    // Validate file type\n    if (!selectedFile.type.startsWith('image/')) {\n      toast({\n        title: \"Invalid file type\",\n        description: \"Please select an image file (PNG, JPG, WebP)\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Validate file size (10MB limit)\n    if (selectedFile.size > 10 * 1024 * 1024) {\n      toast({\n        title: \"File too large\",\n        description: \"Please select an image smaller than 10MB\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Create image preview\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      setImagePreview(e.target?.result as string);\n    };\n    reader.readAsDataURL(selectedFile);\n\n    setFile(selectedFile);\n    setExtractedText(\"\");\n    setResult(null);\n  }, [toast]);\n\n  const handleDrop = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    const droppedFiles = Array.from(e.dataTransfer.files);\n    if (droppedFiles.length > 0) {\n      handleFileSelect(droppedFiles[0]);\n    }\n  }, [handleFileSelect]);\n\n  const handleDragOver = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n  }, []);\n\n  const handleFileInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files && e.target.files[0]) {\n      handleFileSelect(e.target.files[0]);\n    }\n  }, [handleFileSelect]);\n\n  const extractText = async () => {\n    if (!file) {\n      toast({\n        title: \"No file selected\",\n        description: \"Please select an image file first\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // No longer require authentication upfront - let the server decide\n\n    setIsProcessing(true);\n    setProcessingProgress(0);\n\n    try {\n      // Simulate progress for better UX\n      const progressInterval = setInterval(() => {\n        setProcessingProgress((prev) => Math.min(prev + 10, 90));\n      }, 200);\n\n      const formData = new FormData();\n      formData.append('image', file);\n      formData.append('useFiltering', useFiltering.toString());\n\n      const response = await fetch('/api/extract-text', {\n        method: 'POST',\n        credentials: 'include',\n        body: formData,\n      });\n\n      clearInterval(progressInterval);\n      setProcessingProgress(100);\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        \n        if (response.status === 429 && errorData.limitExceeded) {\n          // Check if payment is required for free users\n          if (errorData.requiresPayment) {\n            setShowPaymentModal(true);\n            return;\n          }\n          // Check if authentication is required\n          if (errorData.requiresAuth && !isAuthenticated) {\n            setShowAuthModal(true);\n            return;\n          }\n          // Otherwise show upgrade modal for authenticated users\n          setShowUpgradeModal(true);\n          return;\n        }\n        \n        throw new Error(errorData.error || 'OCR processing failed');\n      }\n\n      const data: ExtractionResult = await response.json();\n      \n      setResult(data);\n      setExtractedText(data.extractedText);\n      \n      // Refresh usage data\n      await refetchUsage();\n      \n      toast({\n        title: \"Success!\",\n        description: `Extracted ${data.wordCount} words with ${data.confidence}% confidence`,\n      });\n\n    } catch (error) {\n      console.error('Text extraction error:', error);\n      toast({\n        title: \"Extraction failed\",\n        description: error instanceof Error ? error.message : \"Please try again\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsProcessing(false);\n      setProcessingProgress(0);\n    }\n  };\n\n  const copyToClipboard = async () => {\n    try {\n      await navigator.clipboard.writeText(extractedText);\n      toast({\n        title: \"Copied!\",\n        description: \"Text copied to clipboard\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Copy failed\",\n        description: \"Please select and copy the text manually\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const downloadText = () => {\n    const blob = new Blob([extractedText], { type: 'text/plain' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `extracted-text-${Date.now()}.txt`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n    \n    toast({\n      title: \"Downloaded!\",\n      description: \"Text file saved to your downloads\",\n    });\n  };\n\n  const resetForm = () => {\n    setFile(null);\n    setImagePreview(null);\n    setExtractedText(\"\");\n    setResult(null);\n    \n    // Clear the file input\n    const fileInput = document.querySelector('input[type=\"file\"]') as HTMLInputElement;\n    if (fileInput) {\n      fileInput.value = '';\n    }\n    \n    toast({\n      title: \"Form Reset\",\n      description: \"Ready for your next image extraction\",\n    });\n  };\n\n  const handleLogout = async () => {\n    try {\n      await logout();\n      resetForm(); // Use the resetForm function\n      toast({\n        title: \"Logged out\",\n        description: \"Successfully logged out\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Logout failed\",\n        description: \"Please try again\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  if (authLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-96\">\n        <Loader2 className=\"h-8 w-8 animate-spin\" />\n        <span className=\"ml-2\">Loading...</span>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"w-full max-w-4xl mx-auto space-y-6\">\n      {/* User Status Bar */}\n      {isAuthenticated && user && (\n        <Card className=\"border-2 border-primary/20 bg-gradient-to-r from-primary/5 to-primary/10\">\n          <CardContent className=\"py-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-4\">\n                <div className=\"flex items-center gap-2\">\n                  {user.isPremium ? (\n                    <Crown className=\"h-5 w-5 text-yellow-500\" />\n                  ) : (\n                    <div className=\"h-5 w-5 rounded-full bg-gray-400\" />\n                  )}\n                  <div>\n                    <p className=\"font-medium\">\n                      Welcome, {user.username}\n                      {user.isPremium && (\n                        <Badge variant=\"secondary\" className=\"ml-2 bg-yellow-100 text-yellow-800\">\n                          Premium\n                        </Badge>\n                      )}\n                    </p>\n                    {usage && (\n                      <p className=\"text-sm text-muted-foreground\">\n                        {user.isPremium \n                          ? `${usage.imageCount || 0}/1500 extractions this month` \n                          : `${usage.imageCount}/${usage.dailyLimit} images used today`\n                        }\n                      </p>\n                    )}\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"flex items-center gap-2\">\n                {!user.isPremium && (\n                  <Button \n                    onClick={() => setShowUpgradeModal(true)}\n                    size=\"sm\"\n                    className=\"bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700\"\n                    data-testid=\"button-upgrade\"\n                  >\n                    <Crown className=\"mr-2 h-4 w-4\" />\n                    Upgrade\n                  </Button>\n                )}\n                <Button onClick={handleLogout} variant=\"outline\" size=\"sm\" data-testid=\"button-logout\">\n                  <LogOut className=\"mr-2 h-4 w-4\" />\n                  Logout\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n      {/* Main Extractor */}\n      <Card className=\"w-full\">\n        <CardHeader className=\"text-center\">\n          <CardTitle className=\"flex items-center justify-center gap-2 text-2xl\">\n            <FileImage className=\"h-6 w-6 text-primary\" />\n            Extract Text from Images\n          </CardTitle>\n          <CardDescription>\n            Upload an image and extract editable text using advanced OCR technology.\n            {!isAuthenticated && usage && (\n              <span className=\"block mt-1 text-muted-foreground\">\n                Free users get {usage.dailyLimit} extractions daily. \n                <Button \n                  variant=\"link\" \n                  className=\"h-auto p-0 ml-1 text-primary hover:underline\"\n                  onClick={() => setShowPaymentModal(true)}\n                >Upgrade for upto 1500 extractions per month</Button>\n              </span>\n            )}\n          </CardDescription>\n        </CardHeader>\n\n        <CardContent className=\"space-y-6\">\n          {/* File Upload Area */}\n          <div\n            className={`\n              border-2 border-dashed rounded-lg p-8 text-center space-y-4 transition-colors cursor-pointer\n              ${file ? 'border-green-300 bg-green-50 dark:bg-green-950 dark:border-green-800' : 'border-gray-300 hover:border-primary hover:bg-primary/5'}\n            `}\n            onDrop={handleDrop}\n            onDragOver={handleDragOver}\n            onClick={() => document.getElementById('file-input')?.click()}\n            data-testid=\"file-drop-zone\"\n          >\n            <input\n              id=\"file-input\"\n              type=\"file\"\n              accept=\"image/*\"\n              onChange={handleFileInputChange}\n              className=\"hidden\"\n              data-testid=\"file-input\"\n            />\n            \n            {file ? (\n              <div className=\"space-y-3\">\n                <CheckCircle className=\"h-12 w-12 text-green-500 mx-auto\" />\n                <div>\n                  <p className=\"font-medium text-green-700 dark:text-green-400\">{file.name}</p>\n                  <p className=\"text-sm text-green-600 dark:text-green-500\">\n                    {(file.size / 1024 / 1024).toFixed(2)} MB • Ready to process\n                  </p>\n                </div>\n              </div>\n            ) : (\n              <div className=\"space-y-3\">\n                <Upload className=\"h-12 w-12 text-gray-400 mx-auto\" />\n                <div>\n                  <p className=\"text-lg font-medium\">Drop your image here</p>\n                  <p className=\"text-gray-500\">or click to browse files</p>\n                  <p className=\"text-sm text-gray-400 mt-2\">\n                    Supports PNG, JPG, WebP • Max 10MB\n                  </p>\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* Upload Another Button - Only shown when results exist */}\n          {result && (\n            <div className=\"flex justify-center\">\n              <Button \n                onClick={resetForm} \n                variant=\"outline\" \n                size=\"lg\"\n                className=\"bg-primary/5 hover:bg-primary/10 border-primary/20\"\n                data-testid=\"button-upload-another\"\n              >\n                <Upload className=\"mr-2 h-5 w-5\" />\n                Upload Another Image\n              </Button>\n            </div>\n          )}\n\n          {/* Settings */}\n          <div className=\"flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-900 rounded-lg\">\n            <div className=\"space-y-1\">\n              <Label htmlFor=\"filtering-switch\" className=\"font-medium\">\n                Smart Text Filtering\n              </Label>\n              <p className=\"text-sm text-muted-foreground\">\n                Remove UI elements and noise for cleaner results\n              </p>\n            </div>\n            <Switch\n              id=\"filtering-switch\"\n              checked={useFiltering}\n              onCheckedChange={setUseFiltering}\n              data-testid=\"filtering-switch\"\n            />\n          </div>\n\n          {/* Extract Button */}\n          <Button \n            onClick={extractText}\n            disabled={!file || isProcessing}\n            className=\"w-full h-12 text-lg font-semibold\"\n            data-testid=\"button-extract\"\n          >\n            {isProcessing ? (\n              <>\n                <Loader2 className=\"mr-2 h-5 w-5 animate-spin\" />\n                Processing... {processingProgress}%\n              </>\n            ) : (\n              <>\n                <Zap className=\"mr-2 h-5 w-5\" />\n                Extract Text\n              </>\n            )}\n          </Button>\n\n          {/* Processing Progress */}\n          {isProcessing && (\n            <div className=\"space-y-2\">\n              <Progress value={processingProgress} className=\"w-full\" />\n              <p className=\"text-sm text-center text-muted-foreground\">\n                Processing your image...\n              </p>\n            </div>\n          )}\n\n          {/* Results - Two Column Layout */}\n          {result && extractedText && imagePreview && (\n            <Card className=\"border-green-200 bg-green-50 dark:bg-green-950 dark:border-green-800\">\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle className=\"text-lg flex items-center gap-2\">\n                    <CheckCircle className=\"h-5 w-5 text-green-500\" />\n                    Text Extraction Results\n                  </CardTitle>\n                  <div className=\"flex items-center gap-2\">\n                    <Badge variant=\"secondary\" className=\"bg-green-100 text-green-800\">\n                      {result.confidence}% confidence\n                    </Badge>\n                    <Badge variant=\"outline\">\n                      {result.wordCount} words\n                    </Badge>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {/* Two Column Layout */}\n                <div className=\"grid md:grid-cols-2 gap-6\">\n                  {/* Left Column - Original Image */}\n                  <div className=\"space-y-3\">\n                    <h3 className=\"font-medium text-gray-900 dark:text-gray-100\">Original Image</h3>\n                    <div className=\"border border-gray-200 dark:border-gray-700 rounded-lg overflow-hidden bg-white dark:bg-gray-800\">\n                      <img \n                        src={imagePreview} \n                        alt=\"Original uploaded image\" \n                        className=\"w-full h-auto max-h-96 object-contain\"\n                        data-testid=\"original-image\"\n                      />\n                    </div>\n                    <p className=\"text-sm text-gray-500 dark:text-gray-400\">\n                      File: {file?.name} ({((file?.size || 0) / 1024 / 1024).toFixed(2)} MB)\n                    </p>\n                  </div>\n\n                  {/* Right Column - Extracted Text */}\n                  <div className=\"space-y-3\">\n                    <h3 className=\"font-medium text-gray-900 dark:text-gray-100\">Extracted Text</h3>\n                    <Textarea\n                      value={extractedText}\n                      onChange={(e) => setExtractedText(e.target.value)}\n                      className=\"min-h-96 font-mono text-sm resize-none\"\n                      placeholder=\"Extracted text will appear here...\"\n                      data-testid=\"extracted-text-area\"\n                    />\n                    \n                    <div className=\"flex gap-2 flex-wrap\">\n                      <Button onClick={copyToClipboard} variant=\"outline\" data-testid=\"button-copy\">\n                        <Copy className=\"mr-2 h-4 w-4\" />\n                        Copy\n                      </Button>\n                      <Button onClick={downloadText} variant=\"outline\" data-testid=\"button-download\">\n                        <Download className=\"mr-2 h-4 w-4\" />\n                        Download\n                      </Button>\n\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n          \n          {/* Usage Warning for Non-Premium Users */}\n          {isAuthenticated && !user?.isPremium && usage && usage.imageCount >= usage.dailyLimit - 1 && (\n            <Alert className=\"border-amber-200 bg-amber-50 dark:border-amber-800 dark:bg-amber-950\">\n              <Crown className=\"h-4 w-4 text-amber-600\" />\n              <AlertDescription className=\"text-amber-800 dark:text-amber-200\">\n                {usage.imageCount >= usage.dailyLimit \n                  ? \"Daily limit reached. Upgrade to Premium for unlimited extractions!\"\n                  : \"Only 1 extraction remaining today. Upgrade to Premium for unlimited access!\"\n                }\n                <Button \n                  onClick={() => setShowUpgradeModal(true)}\n                  size=\"sm\" \n                  className=\"ml-2 bg-amber-600 hover:bg-amber-700\"\n                  data-testid=\"button-upgrade-warning\"\n                >\n                  Upgrade Now\n                </Button>\n              </AlertDescription>\n            </Alert>\n          )}\n        </CardContent>\n      </Card>\n      {/* Modals */}\n      <PaymentModal\n        isOpen={showPaymentModal}\n        onClose={() => {\n          setShowPaymentModal(false);\n          setOauthEmail(null);\n        }}\n        onPaymentSuccess={(email) => {\n          // Payment modal handles the redirect automatically\n          setShowPaymentModal(false);\n          setOauthEmail(null);\n        }}\n        initialEmail={oauthEmail || undefined}\n      />\n      <AuthModal \n        isOpen={showAuthModal} \n        onClose={() => setShowAuthModal(false)} \n      />\n      <PremiumUpgradeModal \n        isOpen={showUpgradeModal} \n        onClose={() => setShowUpgradeModal(false)}\n        currentUsage={usage && usage.imageCount >= usage.dailyLimit ? {\n          imageCount: usage.imageCount,\n          dailyLimit: usage.dailyLimit\n        } : undefined}\n      />\n    </div>\n  );\n}","size_bytes":20855},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/extract.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Link } from \"wouter\";\n\nconst Extract = () => {\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [extractedText, setExtractedText] = useState(\"\");\n  const [confidence, setConfidence] = useState(0);\n  const [language, setLanguage] = useState(\"auto\");\n  const [outputFormat, setOutputFormat] = useState(\"plain\");\n  const { toast } = useToast();\n\n  const handleExtraction = async () => {\n    setIsProcessing(true);\n    \n    // Simulate processing\n    await new Promise(resolve => setTimeout(resolve, 3000));\n    \n    // Simulate extracted text\n    const sampleText = \"Sample extracted text would appear here after processing. This is a demonstration of how the extracted content would be displayed in an editable format.\";\n    setExtractedText(sampleText);\n    setConfidence(98.7);\n    setIsProcessing(false);\n    \n    toast({\n      title: \"Extraction complete\",\n      description: \"Text has been extracted successfully.\",\n    });\n  };\n\n  const copyToClipboard = () => {\n    navigator.clipboard.writeText(extractedText);\n    toast({\n      title: \"Copied to clipboard\",\n      description: \"Extracted text has been copied to your clipboard.\",\n    });\n  };\n\n  const downloadText = () => {\n    const element = document.createElement(\"a\");\n    const file = new Blob([extractedText], { type: 'text/plain' });\n    element.href = URL.createObjectURL(file);\n    element.download = \"extracted_text.txt\";\n    document.body.appendChild(element);\n    element.click();\n    document.body.removeChild(element);\n    \n    toast({\n      title: \"Download started\",\n      description: \"Your extracted text file is being downloaded.\",\n    });\n  };\n\n  return (\n    <div className=\"max-w-6xl mx-auto\">\n      <div className=\"text-center mb-12\">\n        <h1 className=\"text-4xl font-bold text-slate-900 mb-4\">Extract Text</h1>\n        <p className=\"text-xl text-slate-600\">Process your uploaded documents and extract text with AI precision.</p>\n      </div>\n\n      <div className=\"grid lg:grid-cols-2 gap-8\">\n        {/* Left Panel - Document Preview */}\n        <Card>\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold text-slate-900 mb-4\">\n              <i className=\"fas fa-image text-blue-600 mr-2\"></i>Document Preview\n            </h3>\n            <div className=\"border-2 border-dashed border-slate-300 rounded-lg p-8 text-center bg-slate-50\">\n              <i className=\"fas fa-file-alt text-4xl text-slate-400 mb-4\"></i>\n              <p className=\"text-slate-500\">Upload a document to see preview</p>\n            </div>\n            \n            {/* Processing Controls */}\n            <div className=\"mt-6 space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <label className=\"text-sm font-medium text-slate-700\">Language Detection</label>\n                <Select value={language} onValueChange={setLanguage}>\n                  <SelectTrigger className=\"w-40\" data-testid=\"select-language\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"auto\">Auto-detect</SelectItem>\n                    <SelectItem value=\"en\">English</SelectItem>\n                    <SelectItem value=\"es\">Spanish</SelectItem>\n                    <SelectItem value=\"fr\">French</SelectItem>\n                    <SelectItem value=\"de\">German</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div className=\"flex items-center justify-between\">\n                <label className=\"text-sm font-medium text-slate-700\">Output Format</label>\n                <Select value={outputFormat} onValueChange={setOutputFormat}>\n                  <SelectTrigger className=\"w-40\" data-testid=\"select-format\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"plain\">Plain Text</SelectItem>\n                    <SelectItem value=\"formatted\">Formatted Text</SelectItem>\n                    <SelectItem value=\"json\">JSON</SelectItem>\n                    <SelectItem value=\"csv\">CSV (Tables)</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <Button \n                onClick={handleExtraction}\n                disabled={isProcessing}\n                className=\"w-full bg-blue-600 hover:bg-blue-700\"\n                data-testid=\"button-start-extraction\"\n              >\n                {isProcessing ? (\n                  <>\n                    <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                    Processing...\n                  </>\n                ) : (\n                  <>\n                    <i className=\"fas fa-magic mr-2\"></i>Start Extraction\n                  </>\n                )}\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Right Panel - Extracted Text */}\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-lg font-semibold text-slate-900\">\n                <i className=\"fas fa-align-left text-green-600 mr-2\"></i>Extracted Text\n              </h3>\n              <div className=\"flex gap-2\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={copyToClipboard}\n                  disabled={!extractedText}\n                  data-testid=\"button-copy\"\n                >\n                  <i className=\"fas fa-copy\"></i>\n                </Button>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={downloadText}\n                  disabled={!extractedText}\n                  data-testid=\"button-download\"\n                >\n                  <i className=\"fas fa-download\"></i>\n                </Button>\n              </div>\n            </div>\n\n            {/* Text Output Area */}\n            <div className=\"relative\">\n              <Textarea\n                className=\"min-h-96 resize-none\"\n                placeholder=\"Extracted text will appear here...\"\n                value={extractedText}\n                onChange={(e) => setExtractedText(e.target.value)}\n                data-testid=\"extracted-text\"\n              />\n              \n              {/* Processing Indicator */}\n              {isProcessing && (\n                <div className=\"absolute inset-0 bg-white bg-opacity-90 flex items-center justify-center rounded-lg\">\n                  <div className=\"text-center\">\n                    <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n                    <p className=\"text-slate-600\">Processing document...</p>\n                  </div>\n                </div>\n              )}\n            </div>\n\n            {/* Confidence Score */}\n            {confidence > 0 && (\n              <div className=\"mt-4 p-4 bg-green-50 rounded-lg\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm text-green-800\">Confidence Score</span>\n                  <span className=\"text-sm font-semibold text-green-800\" data-testid=\"confidence-score\">\n                    {confidence}%\n                  </span>\n                </div>\n                <div className=\"w-full bg-green-200 rounded-full h-2 mt-2\">\n                  <div \n                    className=\"bg-green-600 h-2 rounded-full transition-all duration-500\" \n                    style={{ width: `${confidence}%` }}\n                  ></div>\n                </div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Action Buttons */}\n      <div className=\"mt-8 flex flex-col sm:flex-row gap-4 justify-center\">\n        <Link href=\"/history\">\n          <Button className=\"bg-slate-600 hover:bg-slate-700\" data-testid=\"button-save-history\">\n            <i className=\"fas fa-save mr-2\"></i>Save to History\n          </Button>\n        </Link>\n        <Button variant=\"outline\" data-testid=\"button-edit-text\">\n          <i className=\"fas fa-edit mr-2\"></i>Edit Text\n        </Button>\n        <Button variant=\"outline\" data-testid=\"button-share-result\">\n          <i className=\"fas fa-share mr-2\"></i>Share Result\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default Extract;\n","size_bytes":8861},"client/src/pages/history.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface HistoryItem {\n  id: string;\n  title: string;\n  date: string;\n  words: number;\n  confidence: number;\n  preview: string;\n  type: 'image' | 'pdf' | 'handwritten';\n}\n\nconst History = () => {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [filterType, setFilterType] = useState(\"all\");\n  const [filterDate, setFilterDate] = useState(\"30days\");\n  const { toast } = useToast();\n\n  // Mock data - in real app this would come from API\n  const historyItems: HistoryItem[] = [\n    {\n      id: \"1\",\n      title: \"Business_Document_01.pdf\",\n      date: \"2 hours ago\",\n      words: 245,\n      confidence: 98.5,\n      preview: \"This is a preview of the extracted text content from the document. The full text can be viewed by clicking the view button...\",\n      type: 'pdf'\n    },\n    {\n      id: \"2\",\n      title: \"Screenshot_Receipt.png\",\n      date: \"yesterday\",\n      words: 87,\n      confidence: 96.2,\n      preview: \"Receipt from Tech Store - Total: $299.99 - Date: 2024-01-15 - Payment method: Credit Card ending in 4532...\",\n      type: 'image'\n    },\n    {\n      id: \"3\",\n      title: \"Handwritten_Notes.jpg\",\n      date: \"3 days ago\",\n      words: 156,\n      confidence: 92.8,\n      preview: \"Meeting notes from project discussion - Key points: budget approval, timeline adjustments, team assignments...\",\n      type: 'handwritten'\n    }\n  ];\n\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case 'pdf': return 'fas fa-file-pdf text-blue-600';\n      case 'image': return 'fas fa-image text-green-600';\n      case 'handwritten': return 'fas fa-pen text-purple-600';\n      default: return 'fas fa-file text-gray-600';\n    }\n  };\n\n  const getTypeColor = (type: string) => {\n    switch (type) {\n      case 'pdf': return 'bg-blue-100';\n      case 'image': return 'bg-green-100';\n      case 'handwritten': return 'bg-purple-100';\n      default: return 'bg-gray-100';\n    }\n  };\n\n  const handleExportAll = () => {\n    toast({\n      title: \"Export started\",\n      description: \"Your extraction history is being exported.\",\n    });\n  };\n\n  const handleClearHistory = () => {\n    toast({\n      title: \"History cleared\",\n      description: \"All extraction history has been removed.\",\n      variant: \"destructive\",\n    });\n  };\n\n  const handleView = (item: HistoryItem) => {\n    toast({\n      title: \"Opening document\",\n      description: `Viewing ${item.title}`,\n    });\n  };\n\n  const handleDownload = (item: HistoryItem) => {\n    toast({\n      title: \"Download started\",\n      description: `${item.title} is being downloaded.`,\n    });\n  };\n\n  const handleDelete = (item: HistoryItem) => {\n    toast({\n      title: \"Document deleted\",\n      description: `${item.title} has been removed from history.`,\n      variant: \"destructive\",\n    });\n  };\n\n  return (\n    <div className=\"max-w-6xl mx-auto\">\n      <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center mb-8\">\n        <div>\n          <h1 className=\"text-4xl font-bold text-slate-900 mb-4\">Extraction History</h1>\n          <p className=\"text-xl text-slate-600\">View and manage your previous text extractions.</p>\n        </div>\n        <div className=\"flex gap-2 mt-4 sm:mt-0\">\n          <Button onClick={handleExportAll} data-testid=\"button-export-all\">\n            <i className=\"fas fa-download mr-2\"></i>Export All\n          </Button>\n          <Button \n            variant=\"destructive\" \n            onClick={handleClearHistory}\n            data-testid=\"button-clear-history\"\n          >\n            <i className=\"fas fa-trash mr-2\"></i>Clear History\n          </Button>\n        </div>\n      </div>\n\n      {/* Filter and Search */}\n      <Card className=\"mb-8\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex flex-col sm:flex-row gap-4\">\n            <div className=\"flex-1\">\n              <Input\n                type=\"text\"\n                placeholder=\"Search extractions...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                data-testid=\"input-search\"\n              />\n            </div>\n            <Select value={filterType} onValueChange={setFilterType}>\n              <SelectTrigger className=\"w-40\" data-testid=\"select-type-filter\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Types</SelectItem>\n                <SelectItem value=\"image\">Images</SelectItem>\n                <SelectItem value=\"pdf\">PDFs</SelectItem>\n                <SelectItem value=\"handwritten\">Handwritten</SelectItem>\n              </SelectContent>\n            </Select>\n            <Select value={filterDate} onValueChange={setFilterDate}>\n              <SelectTrigger className=\"w-40\" data-testid=\"select-date-filter\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"30days\">Last 30 days</SelectItem>\n                <SelectItem value=\"7days\">Last 7 days</SelectItem>\n                <SelectItem value=\"3months\">Last 3 months</SelectItem>\n                <SelectItem value=\"all\">All time</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* History Items */}\n      <div className=\"space-y-4 mb-8\">\n        {historyItems.map((item) => (\n          <Card key={item.id} className=\"hover:shadow-md transition-shadow\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex items-center space-x-4\">\n                  <div className={`w-12 h-12 ${getTypeColor(item.type)} rounded-lg flex items-center justify-center`}>\n                    <i className={getTypeIcon(item.type)}></i>\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold text-slate-900\" data-testid={`item-title-${item.id}`}>\n                      {item.title}\n                    </h3>\n                    <p className=\"text-sm text-slate-600\" data-testid={`item-date-${item.id}`}>\n                      Extracted {item.date}\n                    </p>\n                    <p className=\"text-sm text-slate-500\" data-testid={`item-stats-${item.id}`}>\n                      {item.words} words • {item.confidence}% confidence\n                    </p>\n                  </div>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => handleView(item)}\n                    data-testid={`button-view-${item.id}`}\n                  >\n                    <i className=\"fas fa-eye\"></i>\n                  </Button>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => handleDownload(item)}\n                    data-testid={`button-download-${item.id}`}\n                  >\n                    <i className=\"fas fa-download\"></i>\n                  </Button>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => handleDelete(item)}\n                    data-testid={`button-delete-${item.id}`}\n                  >\n                    <i className=\"fas fa-trash\"></i>\n                  </Button>\n                </div>\n              </div>\n              <div className=\"mt-4 p-3 bg-slate-50 rounded-lg\">\n                <p className=\"text-sm text-slate-700 line-clamp-2\" data-testid={`item-preview-${item.id}`}>\n                  {item.preview}\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* Pagination */}\n      <div className=\"flex items-center justify-between\">\n        <p className=\"text-sm text-slate-600\" data-testid=\"pagination-info\">\n          Showing 1 to 3 of 24 results\n        </p>\n        <div className=\"flex items-center space-x-2\">\n          <Button variant=\"outline\" size=\"sm\" data-testid=\"button-prev\">\n            Previous\n          </Button>\n          <Button size=\"sm\" className=\"bg-blue-600 text-white\" data-testid=\"button-page-1\">\n            1\n          </Button>\n          <Button variant=\"outline\" size=\"sm\" data-testid=\"button-page-2\">\n            2\n          </Button>\n          <Button variant=\"outline\" size=\"sm\" data-testid=\"button-page-3\">\n            3\n          </Button>\n          <Button variant=\"outline\" size=\"sm\" data-testid=\"button-next\">\n            Next\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default History;\n","size_bytes":9020},"client/src/pages/home.tsx":{"content":"import SimpleTextExtractor from \"@/components/simple-text-extractor\";\nimport Footer from \"@/components/footer\";\n\nconst Home = () => {\n  return (\n    <div className=\"animate-fade-in\">\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Hero Section */}\n      <div className=\"text-center mb-12\">\n        <div className=\"flex items-center justify-center mb-8\">\n          <svg width=\"100\" height=\"100\" viewBox=\"0 0 80 80\" className=\"mr-6\">\n            <defs>\n              <linearGradient id=\"heroLogoGradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\n                <stop offset=\"0%\" stopColor=\"#3B82F6\" />\n                <stop offset=\"100%\" stopColor=\"#8B5CF6\" />\n              </linearGradient>\n            </defs>\n            <rect width=\"80\" height=\"80\" rx=\"16\" fill=\"url(#heroLogoGradient)\" />\n            <rect x=\"12\" y=\"12\" width=\"56\" height=\"42\" rx=\"4\" fill=\"white\" opacity=\"0.9\" />\n            <rect x=\"16\" y=\"16\" width=\"12\" height=\"2\" rx=\"1\" fill=\"#3B82F6\" />\n            <rect x=\"16\" y=\"20\" width=\"20\" height=\"2\" rx=\"1\" fill=\"#3B82F6\" />\n            <rect x=\"16\" y=\"24\" width=\"16\" height=\"2\" rx=\"1\" fill=\"#3B82F6\" />\n            <rect x=\"16\" y=\"28\" width=\"24\" height=\"2\" rx=\"1\" fill=\"#3B82F6\" />\n            <rect x=\"16\" y=\"32\" width=\"18\" height=\"2\" rx=\"1\" fill=\"#3B82F6\" />\n            <rect x=\"16\" y=\"36\" width=\"14\" height=\"2\" rx=\"1\" fill=\"#3B82F6\" />\n            <rect x=\"16\" y=\"40\" width=\"22\" height=\"2\" rx=\"1\" fill=\"#3B82F6\" />\n            <rect x=\"16\" y=\"44\" width=\"20\" height=\"2\" rx=\"1\" fill=\"#3B82F6\" />\n            <path d=\"M20 58 L32 66 L44 58 L56 66\" stroke=\"white\" strokeWidth=\"3\" fill=\"none\" strokeLinecap=\"round\" />\n            <circle cx=\"24\" cy=\"62\" r=\"2\" fill=\"white\" />\n            <circle cx=\"36\" cy=\"62\" r=\"2\" fill=\"white\" />\n            <circle cx=\"48\" cy=\"62\" r=\"2\" fill=\"white\" />\n          </svg>\n          <h1 className=\"text-4xl md:text-6xl font-bold text-slate-900\">\n            PictoText\n            <span className=\"block bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">Professional OCR</span>\n          </h1>\n        </div>\n        <p className=\"text-xl text-slate-600 mb-8 max-w-3xl mx-auto\">\n          Transform any image into editable text with enterprise-grade accuracy. Perfect for documents, screenshots, and handwritten notes.\n        </p>\n      </div>\n\n      {/* Simple Text Extractor Component */}\n      <div className=\"mb-16\">\n        <SimpleTextExtractor />\n      </div>\n\n      {/* Features Grid */}\n      <div className=\"grid md:grid-cols-3 gap-8 mb-16\">\n        <div className=\"bg-white rounded-lg shadow-sm hover:shadow-md transition-shadow p-8\">\n          <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center mb-6\">\n            <svg className=\"w-6 h-6 text-blue-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\" />\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z\" />\n            </svg>\n          </div>\n          <h3 className=\"text-xl font-semibold text-slate-900 mb-4\">Enterprise-Grade OCR</h3>\n          <p className=\"text-slate-600\">Advanced AI-powered text recognition with intelligent preprocessing and confidence scoring for maximum accuracy.</p>\n        </div>\n        \n        <div className=\"bg-white rounded-lg shadow-sm hover:shadow-md transition-shadow p-8\">\n          <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center mb-6\">\n            <svg className=\"w-6 h-6 text-green-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 10V3L4 14h7v7l9-11h-7z\" />\n            </svg>\n          </div>\n          <h3 className=\"text-xl font-semibold text-slate-900 mb-4\">Instant Processing</h3>\n          <p className=\"text-slate-600\">Extract text from images in seconds with automatic compression and smart filtering for clean results.</p>\n        </div>\n        \n        <div className=\"bg-white rounded-lg shadow-sm hover:shadow-md transition-shadow p-8\">\n          <div className=\"w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center mb-6\">\n            <svg className=\"w-6 h-6 text-purple-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z\" />\n            </svg>\n          </div>\n          <h3 className=\"text-xl font-semibold text-slate-900 mb-4\">Professional Quality</h3>\n          <p className=\"text-slate-600\">Context-aware text extraction with intelligent filtering to remove UI noise and preserve meaningful content.</p>\n        </div>\n      </div>\n\n      {/* Enhanced Features Section */}\n      <div className=\"bg-white py-16\">\n        <div className=\"text-center mb-12\">\n          <h2 className=\"text-3xl font-bold text-slate-900 mb-4\">Built for Modern Workflows</h2>\n          <p className=\"text-lg text-slate-600 max-w-2xl mx-auto\">\n            Professional OCR technology with comprehensive features for all your text extraction needs\n          </p>\n        </div>\n        \n        <div className=\"grid md:grid-cols-3 gap-8\">\n          <div className=\"text-center p-6\">\n            <div className=\"w-16 h-16 bg-gradient-to-br from-green-500 to-blue-600 rounded-lg flex items-center justify-center mx-auto mb-4\">\n              <svg className=\"w-8 h-8 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 8v13m0-13V6a2 2 0 112 2h-2zm0 0V5.5A2.5 2.5 0 109.5 8H12zm-7 4h14M5 12a2 2 0 110-4h14a2 2 0 110 4M5 12v7a2 2 0 002 2h10a2 2 0 002-2v-7\" />\n              </svg>\n            </div>\n            <h3 className=\"text-xl font-semibold text-slate-900 mb-3\">Free Use</h3>\n            <p className=\"text-slate-600\">\n              Get 3 free image extractions daily. No hidden costs or registration required to start.\n            </p>\n          </div>\n          \n          <div className=\"text-center p-6\">\n            <div className=\"w-16 h-16 bg-gradient-to-br from-purple-500 to-pink-600 rounded-lg flex items-center justify-center mx-auto mb-4\">\n              <svg className=\"w-8 h-8 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z\" />\n              </svg>\n            </div>\n            <h3 className=\"text-xl font-semibold text-slate-900 mb-3\">Multiple Formats</h3>\n            <p className=\"text-slate-600\">\n              Supports JPG, PNG, WEBP, GIF, and BMP formats up to 10MB for maximum compatibility\n            </p>\n          </div>\n          \n          <div className=\"text-center p-6\">\n            <div className=\"w-16 h-16 bg-gradient-to-br from-orange-500 to-red-600 rounded-lg flex items-center justify-center mx-auto mb-4\">\n              <svg className=\"w-8 h-8 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9v-9m0-9v9\" />\n              </svg>\n            </div>\n            <h3 className=\"text-xl font-semibold text-slate-900 mb-3\">Multi-Language Support</h3>\n            <p className=\"text-slate-600\">\n              Recognize text in multiple languages including English, Spanish, French, German, and more\n            </p>\n          </div>\n        </div>\n      </div>\n\n      {/* Stats Section */}\n      <div className=\"bg-gradient-to-r from-blue-600 to-purple-700 rounded-2xl p-12 text-white text-center\">\n        <h2 className=\"text-3xl font-bold mb-8\">Proven Performance</h2>\n        <div className=\"grid md:grid-cols-3 gap-8\">\n          <div>\n            <div className=\"text-4xl font-bold mb-2\" data-testid=\"stat-accuracy\">95%+</div>\n            <div className=\"text-blue-100\">Average Confidence</div>\n          </div>\n          <div>\n            <div className=\"text-4xl font-bold mb-2\" data-testid=\"stat-formats\">5+</div>\n            <div className=\"text-blue-100\">Image Formats</div>\n          </div>\n          <div>\n            <div className=\"text-4xl font-bold mb-2\" data-testid=\"stat-processing\">Under 5s</div>\n            <div className=\"text-blue-100\">Processing Time</div>\n          </div>\n        </div>\n      </div>\n      </main>\n      \n      {/* Footer */}\n      <Footer />\n    </div>\n  );\n};\n\nexport default Home;","size_bytes":9021},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/photo-extract.tsx":{"content":"import PhotoExtractor from \"@/components/photo-extractor\";\n\nconst PhotoExtract = () => {\n  return (\n    <div className=\"animate-fade-in\">\n      <div className=\"text-center mb-12\">\n        <h1 className=\"text-4xl font-bold text-slate-900 mb-4\">Photo Text Extraction</h1>\n        <p className=\"text-xl text-slate-600 max-w-3xl mx-auto\">\n          Upload any photo containing text and extract it instantly with our advanced OCR technology. \n          Perfect for documents, signs, receipts, business cards, and handwritten notes.\n        </p>\n      </div>\n      \n      <PhotoExtractor />\n      \n      {/* Tips Section */}\n      <div className=\"mt-12 max-w-4xl mx-auto\">\n        <div className=\"bg-blue-50 rounded-2xl p-8\">\n          <h2 className=\"text-xl font-semibold text-blue-900 mb-4 text-center\">\n            <i className=\"fas fa-lightbulb mr-2\"></i>Tips for Better Results\n          </h2>\n          <div className=\"grid md:grid-cols-2 gap-6 text-sm\">\n            <div className=\"space-y-3\">\n              <div className=\"flex items-start\">\n                <i className=\"fas fa-check text-blue-600 mr-3 mt-1\"></i>\n                <div>\n                  <strong className=\"text-blue-900\">Good Lighting:</strong>\n                  <p className=\"text-blue-800\">Ensure your image is well-lit with minimal shadows</p>\n                </div>\n              </div>\n              <div className=\"flex items-start\">\n                <i className=\"fas fa-check text-blue-600 mr-3 mt-1\"></i>\n                <div>\n                  <strong className=\"text-blue-900\">High Contrast:</strong>\n                  <p className=\"text-blue-800\">Dark text on light backgrounds works best</p>\n                </div>\n              </div>\n            </div>\n            <div className=\"space-y-3\">\n              <div className=\"flex items-start\">\n                <i className=\"fas fa-check text-blue-600 mr-3 mt-1\"></i>\n                <div>\n                  <strong className=\"text-blue-900\">Straight Angle:</strong>\n                  <p className=\"text-blue-800\">Take photos straight-on rather than at an angle</p>\n                </div>\n              </div>\n              <div className=\"flex items-start\">\n                <i className=\"fas fa-check text-blue-600 mr-3 mt-1\"></i>\n                <div>\n                  <strong className=\"text-blue-900\">High Resolution:</strong>\n                  <p className=\"text-blue-800\">Clear, sharp images produce more accurate results</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PhotoExtract;","size_bytes":2620},"client/src/pages/premium.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth, useUsage } from \"@/hooks/useAuth\";\nimport { PremiumUpgradeModal } from \"@/components/premium-upgrade-modal\";\nimport { AuthModal } from \"@/components/auth-modal\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Crown, Check, Zap, Archive, Infinity, Star, LogIn, UserPlus } from \"lucide-react\";\n\nexport default function Premium() {\n  const [upgradeModalOpen, setUpgradeModalOpen] = useState(false);\n  const [authModalOpen, setAuthModalOpen] = useState(false);\n  const [authMode, setAuthMode] = useState<\"login\" | \"register\">(\"login\");\n  const { user, isAuthenticated } = useAuth();\n  const { data: usage } = useUsage();\n\n  const features = [\n    {\n      icon: <Infinity className=\"h-6 w-6 text-green-500\" />,\n      title: \"Monthly OCR Extractions\",\n      description: \"1500 high-quality extractions per month with priority processing\",\n      free: \"3 per day\",\n      premium: \"1500/month\"\n    },\n    {\n      icon: <Archive className=\"h-6 w-6 text-blue-500\" />,\n      title: \"Multi-language Support\",\n      description: \"Extract text from images in 100+ languages with advanced recognition\",\n      free: \"English only\",\n      premium: \"100+ languages\"\n    },\n    {\n      icon: <Zap className=\"h-6 w-6 text-yellow-500\" />,\n      title: \"Priority Processing\",\n      description: \"Faster OCR processing with enhanced accuracy algorithms\",\n      free: \"Standard speed\",\n      premium: \"Priority queue\"\n    },\n    {\n      icon: <Star className=\"h-6 w-6 text-purple-500\" />,\n      title: \"Advanced Features\",\n      description: \"Access to premium OCR engines and advanced text formatting\",\n      free: \"Basic OCR\",\n      premium: \"Advanced OCR\"\n    }\n  ];\n\n  return (\n    <div className=\"container mx-auto py-12 px-4 max-w-6xl\">\n      {/* Header */}\n      <div className=\"text-center mb-12\">\n        <div className=\"flex items-center justify-center mb-6\">\n          <Crown className=\"h-16 w-16 text-amber-500 mr-4\" />\n          <h1 className=\"text-5xl font-bold bg-gradient-to-r from-amber-500 to-amber-600 bg-clip-text text-transparent\">\n            PictoText Premium\n          </h1>\n        </div>\n        <p className=\"text-xl text-slate-600 max-w-2xl mx-auto\">Unlock 1500 OCR extractions per month and professional features for serious users</p>\n      </div>\n      {/* Current Status */}\n      {isAuthenticated && (\n        <Card className=\"mb-8 max-w-2xl mx-auto\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h3 className=\"font-semibold text-lg mb-2\">Current Plan</h3>\n                {user?.isPremium ? (\n                  <div className=\"flex items-center gap-2\">\n                    <Badge className=\"bg-gradient-to-r from-amber-400 to-amber-600 text-white\">\n                      <Crown className=\"w-3 h-3 mr-1\" />\n                      Premium\n                    </Badge>\n                    <span className=\"text-slate-600\">Unlimited usage</span>\n                  </div>\n                ) : (\n                  <div className=\"flex items-center gap-2\">\n                    <Badge variant=\"outline\">Free Plan</Badge>\n                    <span className=\"text-slate-600\">\n                      {usage ? `${usage.imageCount}/${usage.dailyLimit}` : \"0/3\"} images today\n                    </span>\n                  </div>\n                )}\n              </div>\n              {!user?.isPremium && (\n                <Button \n                  onClick={() => setUpgradeModalOpen(true)}\n                  className=\"bg-gradient-to-r from-amber-500 to-amber-600 hover:from-amber-600 hover:to-amber-700\"\n                  data-testid=\"button-upgrade-hero\"\n                >\n                  <Crown className=\"w-4 h-4 mr-2\" />\n                  Upgrade Now\n                </Button>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n      {/* Pricing Card */}\n      <div className=\"max-w-md mx-auto mb-12\">\n        <Card className=\"border-2 border-amber-200 shadow-lg\">\n          <CardHeader className=\"text-center pb-2\">\n            <div className=\"flex items-center justify-center mb-2\">\n              <Crown className=\"h-8 w-8 text-amber-500\" />\n            </div>\n            <CardTitle className=\"text-2xl\">Premium Plan</CardTitle>\n            <div className=\"text-4xl font-bold text-amber-600 mt-2\">\n              $4.99\n              <span className=\"text-lg font-normal text-slate-500\">/month</span>\n            </div>\n          </CardHeader>\n          <CardContent className=\"pt-4\">\n            <div className=\"text-center mb-6\">\n              {!isAuthenticated ? (\n                <div className=\"space-y-4\">\n                  <p className=\"text-slate-600 mb-4\">Sign in to upgrade to Premium</p>\n                  <div className=\"flex gap-3\">\n                    <Button \n                      onClick={() => {\n                        setAuthMode(\"login\");\n                        setAuthModalOpen(true);\n                      }}\n                      variant=\"outline\" \n                      className=\"flex-1\"\n                      data-testid=\"button-signin\"\n                    >\n                      <LogIn className=\"w-4 h-4 mr-2\" />\n                      Sign In\n                    </Button>\n                    <Button \n                      onClick={() => {\n                        setAuthMode(\"register\");\n                        setAuthModalOpen(true);\n                      }}\n                      className=\"flex-1 bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700\"\n                      data-testid=\"button-register\"\n                    >\n                      <UserPlus className=\"w-4 h-4 mr-2\" />\n                      Register\n                    </Button>\n                  </div>\n                </div>\n              ) : user?.isPremium ? (\n                <div className=\"text-center\">\n                  <Badge className=\"bg-gradient-to-r from-green-400 to-green-600 text-white mb-2\">\n                    <Check className=\"w-3 h-3 mr-1\" />\n                    Active\n                  </Badge>\n                  <p className=\"text-slate-600\">You're already a Premium member!</p>\n                </div>\n              ) : (\n                <Button \n                  onClick={() => setUpgradeModalOpen(true)}\n                  className=\"w-full bg-gradient-to-r from-amber-500 to-amber-600 hover:from-amber-600 hover:to-amber-700 text-white py-3 text-lg\"\n                  data-testid=\"button-upgrade-main\"\n                >\n                  <Crown className=\"w-5 h-5 mr-2\" />\n                  Get Premium Now\n                </Button>\n              )}\n            </div>\n            <div className=\"text-sm text-slate-500 text-center\">\n              Cancel anytime • Secure payment via PayPal\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n      {/* Features Comparison */}\n      <div className=\"mb-12\">\n        <h2 className=\"text-3xl font-bold text-center mb-8\">Feature Comparison</h2>\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          {features.map((feature, index) => (\n            <Card key={index} className=\"h-full\">\n              <CardHeader>\n                <div className=\"flex items-center mb-3\">\n                  {feature.icon}\n                  <CardTitle className=\"text-lg ml-3\">{feature.title}</CardTitle>\n                </div>\n                <p className=\"text-slate-600 text-sm\">{feature.description}</p>\n              </CardHeader>\n              <CardContent className=\"pt-0\">\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm text-slate-500\">Free:</span>\n                    <span className=\"text-sm\">{feature.free}</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm text-slate-500\">Premium:</span>\n                    <span className=\"text-sm font-semibold text-amber-600\">{feature.premium}</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n      {/* FAQ Section */}\n      <Card className=\"max-w-4xl mx-auto\">\n        <CardHeader>\n          <CardTitle className=\"text-2xl text-center\">Frequently Asked Questions</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <div>\n            <h4 className=\"font-semibold mb-2\">What happens to my free extractions when I upgrade?</h4>\n            <p className=\"text-slate-600\">Your usage counter resets immediately upon upgrading, giving you unlimited extractions right away.</p>\n          </div>\n          <div>\n            <h4 className=\"font-semibold mb-2\">Can I cancel my subscription anytime?</h4>\n            <p className=\"text-slate-600\">Yes, you can cancel your Premium subscription at any time. You'll continue to have Premium access until the end of your billing period.</p>\n          </div>\n          <div>\n            <h4 className=\"font-semibold mb-2\">Is my payment information secure?</h4>\n            <p className=\"text-slate-600\">Absolutely. All payments are processed securely through PayPal. We never store your payment information on our servers.</p>\n          </div>\n          <div>\n            <h4 className=\"font-semibold mb-2\">What file formats are supported?</h4>\n            <p className=\"text-slate-600\">We support all major image formats including JPG, PNG, WEBP, GIF, and BMP with files up to 10MB.</p>\n          </div>\n        </CardContent>\n      </Card>\n      {/* Premium Upgrade Modal */}\n      <PremiumUpgradeModal\n        isOpen={upgradeModalOpen}\n        onClose={() => setUpgradeModalOpen(false)}\n        currentUsage={usage}\n      />\n      {/* Auth Modal */}\n      <AuthModal\n        isOpen={authModalOpen}\n        onClose={() => setAuthModalOpen(false)}\n        mode={authMode}\n        onModeChange={setAuthMode}\n      />\n    </div>\n  );\n}","size_bytes":10218},"client/src/pages/settings.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst Settings = () => {\n  const [formData, setFormData] = useState({\n    fullName: \"John Doe\",\n    email: \"john.doe@example.com\",\n    timeZone: \"utc-5\",\n    language: \"en\",\n    autoDetectLanguage: true,\n    highAccuracyMode: false,\n    defaultOutputFormat: \"plain\",\n    autoDeleteUploads: true,\n    dataRetention: \"30days\",\n    emailNotifications: true,\n    processingCompletion: true,\n  });\n\n  const { toast } = useToast();\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handleSwitchChange = (field: string, value: boolean) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handleSave = () => {\n    toast({\n      title: \"Settings saved\",\n      description: \"Your preferences have been updated successfully.\",\n    });\n  };\n\n  const handleEnable2FA = () => {\n    toast({\n      title: \"2FA Setup\",\n      description: \"Two-factor authentication setup wizard will open.\",\n    });\n  };\n\n  return (\n    <div className=\"max-w-4xl mx-auto\">\n      <div className=\"text-center mb-12\">\n        <h1 className=\"text-4xl font-bold text-slate-900 mb-4\">Settings</h1>\n        <p className=\"text-xl text-slate-600\">Customize your TextExtract Pro experience.</p>\n      </div>\n\n      <div className=\"space-y-8\">\n        {/* Account Settings */}\n        <Card>\n          <CardContent className=\"p-8\">\n            <h2 className=\"text-2xl font-semibold text-slate-900 mb-6\">\n              <i className=\"fas fa-user text-blue-600 mr-3\"></i>Account Settings\n            </h2>\n            <div className=\"grid md:grid-cols-2 gap-6\">\n              <div>\n                <label className=\"block text-sm font-medium text-slate-700 mb-2\">Full Name</label>\n                <Input\n                  value={formData.fullName}\n                  onChange={(e) => handleInputChange('fullName', e.target.value)}\n                  data-testid=\"input-full-name\"\n                />\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium text-slate-700 mb-2\">Email Address</label>\n                <Input\n                  type=\"email\"\n                  value={formData.email}\n                  onChange={(e) => handleInputChange('email', e.target.value)}\n                  data-testid=\"input-email\"\n                />\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium text-slate-700 mb-2\">Time Zone</label>\n                <Select value={formData.timeZone} onValueChange={(value) => handleInputChange('timeZone', value)}>\n                  <SelectTrigger data-testid=\"select-timezone\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"utc-5\">UTC-5 (Eastern Time)</SelectItem>\n                    <SelectItem value=\"utc-8\">UTC-8 (Pacific Time)</SelectItem>\n                    <SelectItem value=\"utc+0\">UTC+0 (GMT)</SelectItem>\n                    <SelectItem value=\"utc+1\">UTC+1 (CET)</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium text-slate-700 mb-2\">Language</label>\n                <Select value={formData.language} onValueChange={(value) => handleInputChange('language', value)}>\n                  <SelectTrigger data-testid=\"select-language\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"en\">English</SelectItem>\n                    <SelectItem value=\"es\">Spanish</SelectItem>\n                    <SelectItem value=\"fr\">French</SelectItem>\n                    <SelectItem value=\"de\">German</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Processing Preferences */}\n        <Card>\n          <CardContent className=\"p-8\">\n            <h2 className=\"text-2xl font-semibold text-slate-900 mb-6\">\n              <i className=\"fas fa-cogs text-green-600 mr-3\"></i>Processing Preferences\n            </h2>\n            <div className=\"space-y-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <h3 className=\"font-medium text-slate-900\">Auto-detect Language</h3>\n                  <p className=\"text-sm text-slate-600\">Automatically detect document language</p>\n                </div>\n                <Switch\n                  checked={formData.autoDetectLanguage}\n                  onCheckedChange={(checked) => handleSwitchChange('autoDetectLanguage', checked)}\n                  data-testid=\"switch-auto-detect\"\n                />\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <h3 className=\"font-medium text-slate-900\">High Accuracy Mode</h3>\n                  <p className=\"text-sm text-slate-600\">Use advanced processing for better accuracy (slower)</p>\n                </div>\n                <Switch\n                  checked={formData.highAccuracyMode}\n                  onCheckedChange={(checked) => handleSwitchChange('highAccuracyMode', checked)}\n                  data-testid=\"switch-high-accuracy\"\n                />\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium text-slate-700 mb-2\">Default Output Format</label>\n                <Select value={formData.defaultOutputFormat} onValueChange={(value) => handleInputChange('defaultOutputFormat', value)}>\n                  <SelectTrigger data-testid=\"select-output-format\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"plain\">Plain Text</SelectItem>\n                    <SelectItem value=\"formatted\">Formatted Text</SelectItem>\n                    <SelectItem value=\"json\">JSON</SelectItem>\n                    <SelectItem value=\"csv\">CSV (Tables)</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Privacy & Security */}\n        <Card>\n          <CardContent className=\"p-8\">\n            <h2 className=\"text-2xl font-semibold text-slate-900 mb-6\">\n              <i className=\"fas fa-shield-alt text-purple-600 mr-3\"></i>Privacy & Security\n            </h2>\n            <div className=\"space-y-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <h3 className=\"font-medium text-slate-900\">Auto-delete Uploads</h3>\n                  <p className=\"text-sm text-slate-600\">Automatically delete uploaded files after processing</p>\n                </div>\n                <Switch\n                  checked={formData.autoDeleteUploads}\n                  onCheckedChange={(checked) => handleSwitchChange('autoDeleteUploads', checked)}\n                  data-testid=\"switch-auto-delete\"\n                />\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium text-slate-700 mb-2\">Data Retention Period</label>\n                <Select value={formData.dataRetention} onValueChange={(value) => handleInputChange('dataRetention', value)}>\n                  <SelectTrigger data-testid=\"select-data-retention\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"30days\">30 days</SelectItem>\n                    <SelectItem value=\"90days\">90 days</SelectItem>\n                    <SelectItem value=\"1year\">1 year</SelectItem>\n                    <SelectItem value=\"forever\">Forever</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div className=\"p-4 bg-yellow-50 border border-yellow-200 rounded-lg\">\n                <div className=\"flex items-start\">\n                  <i className=\"fas fa-exclamation-triangle text-yellow-600 mr-3 mt-1\"></i>\n                  <div>\n                    <h4 className=\"font-medium text-yellow-800\">Two-Factor Authentication</h4>\n                    <p className=\"text-sm text-yellow-700 mt-1\">Enhance your account security by enabling 2FA.</p>\n                    <Button\n                      onClick={handleEnable2FA}\n                      className=\"mt-2 bg-yellow-600 hover:bg-yellow-700 text-white\"\n                      data-testid=\"button-enable-2fa\"\n                    >\n                      Enable 2FA\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Notifications */}\n        <Card>\n          <CardContent className=\"p-8\">\n            <h2 className=\"text-2xl font-semibold text-slate-900 mb-6\">\n              <i className=\"fas fa-bell text-orange-600 mr-3\"></i>Notifications\n            </h2>\n            <div className=\"space-y-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <h3 className=\"font-medium text-slate-900\">Email Notifications</h3>\n                  <p className=\"text-sm text-slate-600\">Receive updates about your extractions</p>\n                </div>\n                <Switch\n                  checked={formData.emailNotifications}\n                  onCheckedChange={(checked) => handleSwitchChange('emailNotifications', checked)}\n                  data-testid=\"switch-email-notifications\"\n                />\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <h3 className=\"font-medium text-slate-900\">Processing Completion</h3>\n                  <p className=\"text-sm text-slate-600\">Notify when document processing is complete</p>\n                </div>\n                <Switch\n                  checked={formData.processingCompletion}\n                  onCheckedChange={(checked) => handleSwitchChange('processingCompletion', checked)}\n                  data-testid=\"switch-processing-completion\"\n                />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Save Button */}\n        <div className=\"flex justify-end\">\n          <Button onClick={handleSave} className=\"bg-blue-600 hover:bg-blue-700\" data-testid=\"button-save-settings\">\n            <i className=\"fas fa-save mr-2\"></i>Save Changes\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Settings;\n","size_bytes":11078},"client/src/pages/upload.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst Upload = () => {\n  const [isDragOver, setIsDragOver] = useState(false);\n  const [uploadProgress, setUploadProgress] = useState<number | null>(null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const { toast } = useToast();\n\n  const handleFileSelect = (files: FileList | null) => {\n    if (!files || files.length === 0) return;\n\n    const file = files[0];\n    const maxSize = 10 * 1024 * 1024; // 10MB\n    \n    if (file.size > maxSize) {\n      toast({\n        title: \"File too large\",\n        description: \"Please select a file smaller than 10MB.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Simulate upload progress\n    setUploadProgress(0);\n    const interval = setInterval(() => {\n      setUploadProgress((prev) => {\n        if (prev === null || prev >= 100) {\n          clearInterval(interval);\n          if (prev === 100) {\n            toast({\n              title: \"Upload complete\",\n              description: `${file.name} has been uploaded successfully.`,\n            });\n          }\n          return prev;\n        }\n        return prev + 10;\n      });\n    }, 200);\n  };\n\n  const handleDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragOver(true);\n  };\n\n  const handleDragLeave = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragOver(false);\n  };\n\n  const handleDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragOver(false);\n    handleFileSelect(e.dataTransfer.files);\n  };\n\n  return (\n    <div className=\"max-w-4xl mx-auto\">\n      <div className=\"text-center mb-12\">\n        <h1 className=\"text-4xl font-bold text-slate-900 mb-4\">Upload Your Document</h1>\n        <p className=\"text-xl text-slate-600\">Drag and drop your image or click to browse. Supports PNG, JPG, PDF, and more.</p>\n      </div>\n\n      {/* Upload Zone */}\n      <div \n        className={`upload-zone bg-white border-2 border-dashed rounded-2xl p-12 text-center cursor-pointer mb-8 transition-all ${\n          isDragOver ? 'border-blue-400 bg-blue-50' : 'border-slate-300 hover:border-blue-400 hover:bg-slate-50'\n        }`}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        onDrop={handleDrop}\n        onClick={() => fileInputRef.current?.click()}\n        data-testid=\"upload-zone\"\n      >\n        <div className=\"mb-6\">\n          <i className=\"fas fa-cloud-upload-alt text-6xl text-slate-400\"></i>\n        </div>\n        <h3 className=\"text-2xl font-semibold text-slate-700 mb-4\">Drop your files here</h3>\n        <p className=\"text-slate-500 mb-6\">or click to browse from your computer</p>\n        <Button className=\"bg-blue-600 hover:bg-blue-700\" data-testid=\"button-choose-files\">\n          <i className=\"fas fa-folder-open mr-2\"></i>Choose Files\n        </Button>\n        <input\n          ref={fileInputRef}\n          type=\"file\"\n          className=\"hidden\"\n          multiple\n          accept=\"image/*,.pdf\"\n          onChange={(e) => handleFileSelect(e.target.files)}\n          data-testid=\"file-input\"\n        />\n      </div>\n\n      {/* File Format Support */}\n      <div className=\"grid md:grid-cols-2 gap-8 mb-8\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold text-slate-900 mb-4\">\n              <i className=\"fas fa-file-image text-blue-600 mr-2\"></i>Supported Formats\n            </h3>\n            <div className=\"flex flex-wrap gap-2\">\n              {['JPG', 'PNG', 'PDF', 'TIFF', 'BMP', 'WEBP'].map((format) => (\n                <span key={format} className=\"bg-blue-100 text-blue-800 px-3 py-1 rounded-full text-sm\">\n                  {format}\n                </span>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold text-slate-900 mb-4\">\n              <i className=\"fas fa-info-circle text-green-600 mr-2\"></i>Upload Guidelines\n            </h3>\n            <ul className=\"text-slate-600 space-y-2 text-sm\">\n              <li><i className=\"fas fa-check text-green-500 mr-2\"></i>Maximum file size: 10MB</li>\n              <li><i className=\"fas fa-check text-green-500 mr-2\"></i>Clear, high-resolution images work best</li>\n              <li><i className=\"fas fa-check text-green-500 mr-2\"></i>Good lighting and contrast recommended</li>\n            </ul>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Upload Progress */}\n      {uploadProgress !== null && (\n        <Card>\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold text-slate-900 mb-4\">\n              <i className=\"fas fa-upload text-blue-600 mr-2\"></i>Uploading Files\n            </h3>\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-slate-600\">document.pdf</span>\n                <span className=\"text-green-600\" data-testid=\"upload-progress\">{uploadProgress}%</span>\n              </div>\n              <div className=\"w-full bg-slate-200 rounded-full h-2\">\n                <div \n                  className=\"bg-blue-600 h-2 rounded-full transition-all duration-300\" \n                  style={{ width: `${uploadProgress}%` }}\n                  data-testid=\"progress-bar\"\n                ></div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n};\n\nexport default Upload;\n","size_bytes":5666},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"server/oauth-config.ts":{"content":"import passport from 'passport';\nimport { Strategy as GoogleStrategy } from 'passport-google-oauth20';\nimport { premiumService } from './premium-service';\nimport { storage } from './storage';\n\n// Configure Google OAuth\nif (process.env.GOOGLE_CLIENT_ID && process.env.GOOGLE_CLIENT_SECRET) {\n  // Get the correct callback URL based on environment\n  const replotDomain = process.env.REPLIT_DOMAINS?.split(',')[0];\n  const callbackURL = replotDomain \n    ? `https://${replotDomain}/api/auth/google/callback`\n    : \"http://localhost:5000/api/auth/google/callback\";\n\n  console.log('OAuth callback URL:', callbackURL);\n\n  passport.use(new GoogleStrategy({\n    clientID: process.env.GOOGLE_CLIENT_ID,\n    clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n    callbackURL: callbackURL\n  },\n  async (accessToken: string, refreshToken: string, profile: any, done: any) => {\n    try {\n      // Check if user already exists by email\n      const email = profile.emails?.[0]?.value;\n      if (!email) {\n        return done(new Error('No email provided by Google'), null);\n      }\n      \n      // Check if email is in premium users list first\n      const isPremium = await premiumService.isPremiumUser(email);\n      if (!isPremium) {\n        // Instead of error, redirect to payment with special flag\n        return done(null, { needsPayment: true, email: email, oauthData: profile });\n      }\n      \n      const existingUser = await premiumService.getUserByEmail(email);\n      \n      if (existingUser) {\n        // User exists, log them in\n        return done(null, existingUser);\n      }\n      \n      // Create new user with OAuth data (they're already premium verified)\n      const newUser = await premiumService.createUser({\n        username: profile.displayName || email.split('@')[0] || `user_${profile.id}`,\n        email: email,\n        oauthProvider: 'google',\n        oauthId: profile.id\n      });\n      \n      return done(null, newUser);\n    } catch (error) {\n      console.error('Google OAuth error:', error);\n      return done(error, null);\n    }\n  }));\n}\n\n\n\n// Passport session serialization\npassport.serializeUser((user: any, done) => {\n  // Handle special case for users who need payment\n  if (user.needsPayment) {\n    done(null, { needsPayment: true, email: user.email });\n  } else {\n    done(null, user.id);\n  }\n});\n\npassport.deserializeUser(async (data: any, done) => {\n  try {\n    // Handle special case for users who need payment\n    if (typeof data === 'object' && data.needsPayment) {\n      done(null, data);\n    } else {\n      // Normal user lookup - use premium service for authenticated users\n      const user = await premiumService.getUserById(data);\n      done(null, user);\n    }\n  } catch (error) {\n    console.error('Deserialization error:', error);\n    done(null, null); // Return null instead of error to prevent crashes\n  }\n});\n\nexport default passport;","size_bytes":2869},"client/src/components/payment-modal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Check, CreditCard, Loader2 } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface PaymentModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onPaymentSuccess: (email: string) => void;\n  initialEmail?: string;\n}\n\nexport function PaymentModal({ isOpen, onClose, onPaymentSuccess, initialEmail }: PaymentModalProps) {\n  const [email, setEmail] = useState(initialEmail || \"\");\n  const [isProcessing, setIsProcessing] = useState(false);\n  const { toast } = useToast();\n\n  // Update email when initialEmail prop changes\n  useEffect(() => {\n    if (initialEmail) {\n      setEmail(initialEmail);\n    }\n  }, [initialEmail]);\n\n  const handlePayPalPayment = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!email) {\n      toast({\n        title: \"Email Required\",\n        description: \"Please enter your email address to continue with payment.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setIsProcessing(true);\n\n    try {\n      const response = await fetch(\"/api/payment/paypal\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          email: email,\n          amount: \"4.99\",\n          currency: \"USD\"\n        })\n      });\n\n      const result = await response.json();\n\n      if (!response.ok) {\n        throw new Error(result.error || \"Payment failed\");\n      }\n\n      // Call the success callback with email to notify parent\n      onPaymentSuccess(email);\n      \n      // Show success message\n      toast({\n        title: \"Payment Successful!\",\n        description: \"Your premium account is ready! You can now sign in with your credentials.\",\n        variant: \"default\"\n      });\n    } catch (error: any) {\n      console.error(\"Payment error:\", error);\n      toast({\n        title: \"Payment Failed\",\n        description: error.message || \"There was an error processing your payment. Please try again.\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-md\" data-testid=\"payment-modal\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <CreditCard className=\"h-5 w-5\" />\n            Upgrade to Premium\n          </DialogTitle>\n          <DialogDescription>\n            Get 1500 monthly image text extractions and 1GB of storage for just $4.99/month\n          </DialogDescription>\n        </DialogHeader>\n        \n        <Card className=\"border-0 shadow-none\">\n          <CardHeader className=\"pb-4\">\n            <CardTitle className=\"text-lg\">Premium Features</CardTitle>\n            <CardDescription>\n              Everything you need for professional text extraction\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center gap-2\">\n                <Check className=\"h-4 w-4 text-green-600\" />\n                <span className=\"text-sm\">1,500 extractions per month</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Check className=\"h-4 w-4 text-green-600\" />\n                <span className=\"text-sm\">Advanced OCR processing</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Check className=\"h-4 w-4 text-green-600\" />\n                <span className=\"text-sm\">Premium support</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Check className=\"h-4 w-4 text-green-600\" />\n                <span className=\"text-sm\">1500 extractions/month</span>\n              </div>\n            </div>\n\n            <form onSubmit={handlePayPalPayment} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"payment-email\">Email Address</Label>\n                <Input\n                  id=\"payment-email\"\n                  data-testid=\"input-payment-email\"\n                  type=\"email\"\n                  placeholder=\"Enter your email\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  disabled={isProcessing}\n                  required\n                />\n                <p className=\"text-xs text-muted-foreground\">\n                  This email will be used for your premium account\n                </p>\n              </div>\n\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between p-3 bg-muted/50 rounded-lg\">\n                  <span className=\"font-medium\">Premium Monthly</span>\n                  <span className=\"text-lg font-bold\">$4.99</span>\n                </div>\n\n                <Button \n                  type=\"submit\" \n                  className=\"w-full\" \n                  disabled={isProcessing}\n                  data-testid=\"button-paypal-payment\"\n                >\n                  {isProcessing ? (\n                    <>\n                      <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                      Processing Payment...\n                    </>\n                  ) : (\n                    <>\n                      <CreditCard className=\"mr-2 h-4 w-4\" />\n                      Pay with PayPal - $4.99\n                    </>\n                  )}\n                </Button>\n              </div>\n            </form>\n\n            <div className=\"text-xs text-muted-foreground text-center space-y-1\">\n              <p>Secure payment processing via PayPal</p>\n              <p>Cancel anytime from your account settings</p>\n            </div>\n          </CardContent>\n        </Card>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":6231},"server/free-usage-service.ts":{"content":"import { Request } from \"express\";\nimport crypto from \"crypto\";\n\n/**\n * Free Tier Usage Service\n * Tracks usage by IP + cookie combination\n * Allows 3 extractions per day for free users\n */\n\nexport interface FreeUsageData {\n  ipAddress: string;\n  cookieId: string;\n  usageCount: number;\n  canProcess: boolean;\n  dailyLimit: number;\n}\n\nexport class FreeUsageService {\n  private static readonly DAILY_LIMIT = 3;\n  private static readonly COOKIE_NAME = \"pictotext_free_user\";\n  private usageMap = new Map<string, { count: number; lastReset: Date }>();\n\n  /**\n   * Get or create a unique identifier for free user\n   */\n  private getOrCreateCookieId(req: Request): string {\n    let cookieId = req.headers.cookie\n      ?.split(';')\n      .find(c => c.trim().startsWith(`${FreeUsageService.COOKIE_NAME}=`))\n      ?.split('=')[1];\n\n    if (!cookieId) {\n      cookieId = crypto.randomUUID();\n    }\n\n    return cookieId;\n  }\n\n  /**\n   * Get client IP address\n   */\n  private getClientIP(req: Request): string {\n    return req.ip || \n           req.connection.remoteAddress || \n           req.headers['x-forwarded-for']?.toString().split(',')[0] || \n           'unknown';\n  }\n\n  /**\n   * Generate unique key for IP + cookie combination\n   */\n  private generateUsageKey(ipAddress: string, cookieId: string): string {\n    return `${ipAddress}_${cookieId}`;\n  }\n\n  /**\n   * Check if it's a new day and reset counter if needed\n   */\n  private shouldResetDaily(lastReset: Date): boolean {\n    const now = new Date();\n    const yesterday = new Date(now);\n    yesterday.setDate(yesterday.getDate() - 1);\n    return lastReset < yesterday;\n  }\n\n  /**\n   * Get current usage status for a free user\n   */\n  getCurrentUsage(req: Request): FreeUsageData {\n    const cookieId = this.getOrCreateCookieId(req);\n    const ipAddress = this.getClientIP(req);\n    const usageKey = this.generateUsageKey(ipAddress, cookieId);\n    \n    let usageData = this.usageMap.get(usageKey);\n    \n    // Reset daily counter if needed\n    if (usageData && this.shouldResetDaily(usageData.lastReset)) {\n      usageData = { count: 0, lastReset: new Date() };\n      this.usageMap.set(usageKey, usageData);\n    } else if (!usageData) {\n      usageData = { count: 0, lastReset: new Date() };\n      this.usageMap.set(usageKey, usageData);\n    }\n\n    return {\n      ipAddress,\n      cookieId,\n      usageCount: usageData.count,\n      canProcess: usageData.count < FreeUsageService.DAILY_LIMIT,\n      dailyLimit: FreeUsageService.DAILY_LIMIT\n    };\n  }\n\n  /**\n   * Increment usage count for a free user\n   */\n  incrementUsage(req: Request): FreeUsageData {\n    const cookieId = this.getOrCreateCookieId(req);\n    const ipAddress = this.getClientIP(req);\n    const usageKey = this.generateUsageKey(ipAddress, cookieId);\n    \n    let usageData = this.usageMap.get(usageKey);\n    \n    if (!usageData || this.shouldResetDaily(usageData.lastReset)) {\n      usageData = { count: 0, lastReset: new Date() };\n    }\n    \n    usageData.count++;\n    this.usageMap.set(usageKey, usageData);\n\n    return {\n      ipAddress,\n      cookieId,\n      usageCount: usageData.count,\n      canProcess: usageData.count < FreeUsageService.DAILY_LIMIT,\n      dailyLimit: FreeUsageService.DAILY_LIMIT\n    };\n  }\n\n  /**\n   * Set cookie in response for tracking\n   */\n  setCookieInResponse(res: any, cookieId: string): void {\n    res.cookie(FreeUsageService.COOKIE_NAME, cookieId, {\n      maxAge: 365 * 24 * 60 * 60 * 1000, // 1 year\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production'\n    });\n  }\n}\n\nexport const freeUsageService = new FreeUsageService();","size_bytes":3596},"server/premium-service.ts":{"content":"/**\n * Premium Service\n * Handles premium user verification and PayPal payment processing\n */\n\nimport { randomUUID } from \"crypto\";\nimport type { PremiumUser, NewPremiumUser, User, NewUser } from \"@shared/schema\";\n\nexport interface PremiumUserData {\n  id: string;\n  email: string;\n  paypalOrderId?: string;\n  subscriptionStatus: \"active\" | \"cancelled\" | \"expired\";\n}\n\nexport class PremiumService {\n  private premiumUsers = new Map<string, PremiumUserData>();\n  private premiumUsersByEmail = new Map<string, PremiumUserData>();\n  private users = new Map<string, User & { monthlyUsageCount: number }>();\n  private usersByEmail = new Map<string, User & { monthlyUsageCount: number }>();\n\n  /**\n   * Check if email is in premium users list (has paid via PayPal)\n   */\n  async isPremiumUser(email: string): Promise<boolean> {\n    return this.premiumUsersByEmail.has(email);\n  }\n\n  /**\n   * Add user to premium list after PayPal payment\n   */\n  async addPremiumUser(email: string, paypalOrderId?: string): Promise<PremiumUserData> {\n    const premiumUser: PremiumUserData = {\n      id: randomUUID(),\n      email,\n      paypalOrderId,\n      subscriptionStatus: \"active\"\n    };\n    \n    this.premiumUsers.set(premiumUser.id, premiumUser);\n    this.premiumUsersByEmail.set(email, premiumUser);\n    \n    return premiumUser;\n  }\n\n  /**\n   * Get premium user by email\n   */\n  async getPremiumUserByEmail(email: string): Promise<PremiumUserData | undefined> {\n    return this.premiumUsersByEmail.get(email);\n  }\n\n  /**\n   * Create actual user account (only after premium verification)\n   */\n  async createUser(userData: any): Promise<User> {\n    // Check if email is premium first\n    const isPremium = await this.isPremiumUser(userData.email);\n    if (!isPremium) {\n      throw new Error(\"Only premium subscribers can create accounts. Please purchase premium first.\");\n    }\n\n    // Hash password if provided\n    let passwordHash: string | null = null;\n    if (userData.password) {\n      const bcrypt = await import(\"bcrypt\");\n      passwordHash = await bcrypt.hash(userData.password, 12);\n    } else if (userData.passwordHash) {\n      passwordHash = userData.passwordHash;\n    }\n\n    const user: User & { monthlyUsageCount: number } = {\n      id: randomUUID(),\n      username: userData.username,\n      email: userData.email,\n      passwordHash,\n      oauthProvider: userData.oauthProvider || null,\n      oauthId: userData.oauthId || null,\n      monthlyUsageCount: 0,\n      lastUsageReset: new Date(),\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n\n    this.users.set(user.id, user);\n    this.usersByEmail.set(user.email, user);\n\n    return user;\n  }\n\n  /**\n   * Get user by email (only premium users can have accounts)\n   */\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return this.usersByEmail.get(email);\n  }\n\n  /**\n   * Get user by ID\n   */\n  async getUserById(id: string): Promise<any> {\n    return this.users.get(id);\n  }\n\n  /**\n   * Check and reset monthly usage if needed\n   */\n  async checkAndResetMonthlyUsage(userId: string): Promise<void> {\n    const user = this.users.get(userId);\n    if (!user) return;\n\n    const now = new Date();\n    const lastReset = new Date(user.lastUsageReset);\n    const monthsSinceReset = (now.getFullYear() - lastReset.getFullYear()) * 12 + \n                           (now.getMonth() - lastReset.getMonth());\n\n    if (monthsSinceReset >= 1) {\n      user.monthlyUsageCount = 0;\n      user.lastUsageReset = now;\n      this.users.set(userId, user);\n    }\n  }\n\n  /**\n   * Increment monthly usage for premium user\n   */\n  async incrementMonthlyUsage(userId: string): Promise<number> {\n    await this.checkAndResetMonthlyUsage(userId);\n    \n    const user = this.users.get(userId);\n    if (!user) throw new Error(\"User not found\");\n\n    user.monthlyUsageCount++;\n    this.users.set(userId, user);\n\n    return user.monthlyUsageCount;\n  }\n\n  /**\n   * Get monthly usage for premium user\n   */\n  async getMonthlyUsage(userId: string): Promise<{ count: number; limit: number; canProcess: boolean }> {\n    await this.checkAndResetMonthlyUsage(userId);\n    \n    const user = this.users.get(userId);\n    if (!user) throw new Error(\"User not found\");\n\n    const MONTHLY_LIMIT = 1500;\n    return {\n      count: user.monthlyUsageCount,\n      limit: MONTHLY_LIMIT,\n      canProcess: user.monthlyUsageCount < MONTHLY_LIMIT\n    };\n  }\n\n  /**\n   * Authenticate user by username/password\n   */\n  async authenticateUser(username: string, password: string): Promise<User | null> {\n    const bcrypt = await import(\"bcrypt\");\n    \n    for (const [_, user] of this.users) {\n      if (user.username === username && user.passwordHash) {\n        const isValid = await bcrypt.compare(password, user.passwordHash);\n        if (isValid) {\n          return user;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Find user by OAuth provider\n   */\n  async findUserByOAuth(provider: string, oauthId: string): Promise<User | undefined> {\n    for (const [_, user] of this.users) {\n      if (user.oauthProvider === provider && user.oauthId === oauthId) {\n        return user;\n      }\n    }\n    return undefined;\n  }\n}\n\nexport const premiumService = new PremiumService();","size_bytes":5211},"client/src/components/auth-modal.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { PaymentModal } from \"./payment-modal\";\nimport { Loader2 } from \"lucide-react\";\nimport { FaGoogle } from \"react-icons/fa\";\n\ninterface AuthModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  mode?: \"login\" | \"register\";\n  onModeChange?: (mode: \"login\" | \"register\") => void;\n  defaultTab?: \"login\" | \"register\";\n}\n\nexport function AuthModal({ isOpen, onClose, mode, onModeChange, defaultTab = \"login\" }: AuthModalProps) {\n  const { login, register } = useAuth();\n  const { toast } = useToast();\n  const [isLoading, setIsLoading] = useState(false);\n  const [activeTab, setActiveTab] = useState(mode || defaultTab);\n  const [showPaymentModal, setShowPaymentModal] = useState(false);\n  const [paymentEmail, setPaymentEmail] = useState<string | null>(null);\n\n  // Update activeTab when mode prop changes\n  useEffect(() => {\n    if (mode) {\n      setActiveTab(mode);\n    }\n  }, [mode]);\n\n  // Handle tab change and notify parent\n  const handleTabChange = (newTab: \"login\" | \"register\") => {\n    setActiveTab(newTab);\n    if (onModeChange) {\n      onModeChange(newTab);\n    }\n  };\n\n  const [loginForm, setLoginForm] = useState({\n    username: \"\",\n    password: \"\",\n  });\n\n  const [registerForm, setRegisterForm] = useState({\n    username: \"\",\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n  });\n\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!loginForm.username || !loginForm.password) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in all fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsLoading(true);\n    try {\n      await login({\n        username: loginForm.username,\n        password: loginForm.password,\n      });\n      \n      toast({\n        title: \"Success\",\n        description: \"Logged in successfully!\",\n      });\n      \n      onClose();\n      \n      // Reset form\n      setLoginForm({ username: \"\", password: \"\" });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"Login failed\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleRegister = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!registerForm.username || !registerForm.email || !registerForm.password) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in all fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (registerForm.password !== registerForm.confirmPassword) {\n      toast({\n        title: \"Error\",\n        description: \"Passwords do not match\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (registerForm.password.length < 6) {\n      toast({\n        title: \"Error\",\n        description: \"Password must be at least 6 characters long\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsLoading(true);\n    try {\n      await register({\n        username: registerForm.username,\n        email: registerForm.email,\n        password: registerForm.password,\n      });\n      \n      toast({\n        title: \"Success\",\n        description: \"Account created successfully!\",\n      });\n      \n      onClose();\n      \n      // Reset form\n      setRegisterForm({ username: \"\", email: \"\", password: \"\", confirmPassword: \"\" });\n    } catch (error) {\n      // Check if it's a payment requirement error\n      if (error instanceof Error && (error as any).requiresPayment) {\n        setPaymentEmail((error as any).email);\n        setShowPaymentModal(true);\n        onClose(); // Close auth modal\n        return;\n      }\n      \n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"Registration failed\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Social authentication handlers\n  const handleSocialAuth = async (provider: string) => {\n    setIsLoading(true);\n    try {\n      // Redirect to OAuth provider\n      window.location.href = `/api/auth/${provider}`;\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: `${provider} authentication failed`,\n        variant: \"destructive\",\n      });\n      setIsLoading(false);\n    }\n  };\n\n  const SocialLoginButtons = () => (\n    <div className=\"space-y-3\">\n      <Button\n        onClick={() => handleSocialAuth(\"google\")}\n        variant=\"outline\"\n        className=\"w-full flex items-center justify-center gap-2 py-3\"\n        disabled={isLoading}\n        data-testid=\"button-google-auth\"\n      >\n        <FaGoogle className=\"w-4 h-4 text-red-500\" />\n        Continue with Google\n      </Button>\n    </div>\n  );\n\n  return (\n    <>\n      <Dialog open={isOpen} onOpenChange={onClose}>\n        <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle className=\"text-center text-xl font-bold\">\n            Welcome to PictoText\n          </DialogTitle>\n        </DialogHeader>\n        \n        <Tabs value={activeTab} onValueChange={(value) => handleTabChange(value as \"login\" | \"register\")} className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"login\">Login</TabsTrigger>\n            <TabsTrigger value=\"register\">Register</TabsTrigger>\n          </TabsList>\n          \n          <TabsContent value=\"login\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Login</CardTitle>\n                <CardDescription>\n                  Premium access only. Sign in with your premium account.\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <form onSubmit={handleLogin} className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"login-username\">Username</Label>\n                    <Input\n                      id=\"login-username\"\n                      data-testid=\"input-login-username\"\n                      type=\"text\"\n                      placeholder=\"Enter your username\"\n                      value={loginForm.username}\n                      onChange={(e) => setLoginForm({ ...loginForm, username: e.target.value })}\n                      disabled={isLoading}\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"login-password\">Password</Label>\n                    <Input\n                      id=\"login-password\"\n                      data-testid=\"input-login-password\"\n                      type=\"password\"\n                      placeholder=\"Enter your password\"\n                      value={loginForm.password}\n                      onChange={(e) => setLoginForm({ ...loginForm, password: e.target.value })}\n                      disabled={isLoading}\n                    />\n                  </div>\n                  <Button \n                    type=\"submit\" \n                    data-testid=\"button-login-submit\"\n                    className=\"w-full\" \n                    disabled={isLoading}\n                  >\n                    {isLoading ? (\n                      <>\n                        <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                        Logging in...\n                      </>\n                    ) : (\n                      \"Login\"\n                    )}\n                  </Button>\n                </form>\n                \n                <div className=\"mt-6\">\n                  <div className=\"relative\">\n                    <div className=\"absolute inset-0 flex items-center\">\n                      <Separator className=\"w-full\" />\n                    </div>\n                    <div className=\"relative flex justify-center text-xs uppercase\">\n                      <span className=\"bg-white dark:bg-gray-950 px-2 text-muted-foreground\">\n                        Or continue with\n                      </span>\n                    </div>\n                  </div>\n                  \n                  <div className=\"mt-4\">\n                    <SocialLoginButtons />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n          \n          <TabsContent value=\"register\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Create Account</CardTitle>\n                <CardDescription>\n                  Create your premium account. Only premium subscribers can register.\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <form onSubmit={handleRegister} className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"register-username\">Username</Label>\n                    <Input\n                      id=\"register-username\"\n                      data-testid=\"input-register-username\"\n                      type=\"text\"\n                      placeholder=\"Choose a username\"\n                      value={registerForm.username}\n                      onChange={(e) => setRegisterForm({ ...registerForm, username: e.target.value })}\n                      disabled={isLoading}\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"register-email\">Email</Label>\n                    <Input\n                      id=\"register-email\"\n                      data-testid=\"input-register-email\"\n                      type=\"email\"\n                      placeholder=\"Enter your email\"\n                      value={registerForm.email}\n                      onChange={(e) => setRegisterForm({ ...registerForm, email: e.target.value })}\n                      disabled={isLoading}\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"register-password\">Password</Label>\n                    <Input\n                      id=\"register-password\"\n                      data-testid=\"input-register-password\"\n                      type=\"password\"\n                      placeholder=\"Choose a password (min. 6 characters)\"\n                      value={registerForm.password}\n                      onChange={(e) => setRegisterForm({ ...registerForm, password: e.target.value })}\n                      disabled={isLoading}\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"register-confirm-password\">Confirm Password</Label>\n                    <Input\n                      id=\"register-confirm-password\"\n                      data-testid=\"input-register-confirm-password\"\n                      type=\"password\"\n                      placeholder=\"Confirm your password\"\n                      value={registerForm.confirmPassword}\n                      onChange={(e) => setRegisterForm({ ...registerForm, confirmPassword: e.target.value })}\n                      disabled={isLoading}\n                    />\n                  </div>\n                  <Button \n                    type=\"submit\" \n                    data-testid=\"button-register-submit\"\n                    className=\"w-full\" \n                    disabled={isLoading}\n                  >\n                    {isLoading ? (\n                      <>\n                        <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                        Creating account...\n                      </>\n                    ) : (\n                      \"Create Account\"\n                    )}\n                  </Button>\n                </form>\n                \n                <div className=\"mt-6\">\n                  <div className=\"relative\">\n                    <div className=\"absolute inset-0 flex items-center\">\n                      <Separator className=\"w-full\" />\n                    </div>\n                    <div className=\"relative flex justify-center text-xs uppercase\">\n                      <span className=\"bg-white dark:bg-gray-950 px-2 text-muted-foreground\">\n                        Or continue with\n                      </span>\n                    </div>\n                  </div>\n                  \n                  <div className=\"mt-4\">\n                    <SocialLoginButtons />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n        \n        <div className=\"text-center text-sm text-muted-foreground\">\n          <p>Free users get 3 image extractions per day.</p>\n          <p>Upgrade to Premium for 1500 monthly extractions at just $4.99/month!</p>\n        </div>\n        </DialogContent>\n      </Dialog>\n      \n      {/* Payment Modal for registration payment requirement */}\n      <PaymentModal\n        isOpen={showPaymentModal}\n        onClose={() => {\n          setShowPaymentModal(false);\n          setPaymentEmail(null);\n        }}\n        initialEmail={paymentEmail || undefined}\n        onPaymentSuccess={(email) => {\n          // Close payment modal and immediately show login\n          setShowPaymentModal(false);\n          setPaymentEmail(null);\n          \n          // Switch to login tab\n          setActiveTab(\"login\");\n          \n          // Show success message\n          toast({\n            title: \"Registration Successful!\",\n            description: \"Your premium account is ready. Please sign in with your credentials below.\",\n            variant: \"default\"\n          });\n          \n          // Keep the auth modal open on login tab - no need to close it\n        }}\n      />\n    </>\n  );\n}","size_bytes":14251},"server/ocr-service.ts":{"content":"export interface OCRResult {\n  extractedText: string;\n  confidence: number;\n  wordCount: number;\n  rawText?: string;\n}\n\nexport class OCRService {\n  private apiKey: string;\n\n  constructor() {\n    this.apiKey = process.env.OCR_SPACE_API_KEY || \"\";\n    \n    if (!this.apiKey) {\n      throw new Error(\"OCR_SPACE_API_KEY environment variable is required\");\n    }\n  }\n\n  async extractTextFromImage(\n    imageBuffer: Buffer, \n    useFiltering = false\n  ): Promise<OCRResult> {\n    try {\n      // Try OCR.space API first with a shorter timeout\n      try {\n        return await this.extractWithOCRSpace(imageBuffer, useFiltering);\n      } catch (error) {\n        console.log(\"OCR.space failed, falling back to local Tesseract:\", error.message);\n        // Fallback to local Tesseract processing\n        return await this.extractWithTesseract(imageBuffer, useFiltering);\n      }\n    } catch (error) {\n      console.error(\"All OCR methods failed:\", error);\n      throw new Error(\"OCR processing failed. Please try again with a different image.\");\n    }\n  }\n\n  private async extractWithOCRSpace(\n    imageBuffer: Buffer, \n    useFiltering = false\n  ): Promise<OCRResult> {\n    // Compress image if it's too large (OCR.space has 1MB limit)\n    let processedBuffer = imageBuffer;\n    const maxSize = 1024 * 1024; // 1MB limit for OCR.space\n    \n    if (imageBuffer.length > maxSize) {\n      console.log(`Image size ${Math.round(imageBuffer.length / 1024)}KB exceeds limit, compressing...`);\n      processedBuffer = await this.compressImage(imageBuffer);\n      console.log(`Compressed to ${Math.round(processedBuffer.length / 1024)}KB`);\n    }\n\n    // Convert buffer to base64\n    const base64Image = processedBuffer.toString('base64');\n    const mimeType = this.detectMimeType(processedBuffer);\n    const dataUrl = `data:${mimeType};base64,${base64Image}`;\n\n    // Prepare FormData for OCR.space API\n    const formData = new FormData();\n    formData.append(\"base64Image\", dataUrl);\n    formData.append(\"language\", \"eng\");\n    formData.append(\"OCREngine\", \"2\");\n    formData.append(\"detectOrientation\", \"true\");\n    formData.append(\"scale\", \"true\");\n    formData.append(\"isOverlayRequired\", \"false\");\n    formData.append(\"isTable\", \"true\");\n\n    const response = await fetch(\"https://api.ocr.space/parse/image\", {\n      method: \"POST\",\n      headers: {\n        \"apikey\": this.apiKey,\n      },\n      body: formData,\n      signal: AbortSignal.timeout(15000) // Reduced to 15 seconds\n    });\n\n    if (!response.ok) {\n      throw new Error(`OCR API request failed: ${response.statusText}`);\n    }\n\n    const ocrResult = await response.json();\n    \n    if (ocrResult.IsErroredOnProcessing) {\n      throw new Error(ocrResult.ErrorMessage || \"OCR processing failed\");\n    }\n\n    let extractedText = ocrResult.ParsedResults?.[0]?.ParsedText || \"\";\n    \n    // Calculate confidence\n    const confidence = this.calculateConfidence(extractedText, ocrResult);\n    \n    // Apply filtering if requested\n    let filteredText = extractedText;\n    if (useFiltering && extractedText) {\n      filteredText = this.filterOCRText(extractedText);\n    }\n\n    const finalText = filteredText || extractedText;\n    const wordCount = finalText.trim().split(/\\s+/).filter((word: string) => word.length > 0).length;\n\n    return {\n      extractedText: finalText,\n      confidence,\n      wordCount,\n      rawText: extractedText !== finalText ? extractedText : undefined,\n    };\n  }\n\n  private async extractWithTesseract(\n    imageBuffer: Buffer, \n    useFiltering = false\n  ): Promise<OCRResult> {\n    const Tesseract = require('tesseract.js');\n    \n    console.log(\"Using local Tesseract OCR as fallback...\");\n    \n    const { data: { text, confidence } } = await Tesseract.recognize(\n      imageBuffer,\n      'eng',\n      {\n        logger: m => {\n          if (m.status === 'recognizing text') {\n            console.log(`Tesseract progress: ${Math.round(m.progress * 100)}%`);\n          }\n        }\n      }\n    );\n\n    let extractedText = text || \"\";\n    \n    // Apply filtering if requested\n    let filteredText = extractedText;\n    if (useFiltering && extractedText) {\n      filteredText = this.filterOCRText(extractedText);\n    }\n\n    const finalText = filteredText || extractedText;\n    const wordCount = finalText.trim().split(/\\s+/).filter((word: string) => word.length > 0).length;\n\n    return {\n      extractedText: finalText,\n      confidence: confidence || 85, // Tesseract typically provides good confidence\n      wordCount,\n      rawText: extractedText !== finalText ? extractedText : undefined,\n    };\n  }\n\n  private detectMimeType(buffer: Buffer): string {\n    // Simple MIME type detection based on file headers\n    const header = buffer.subarray(0, 4);\n    \n    // PNG\n    if (header[0] === 0x89 && header[1] === 0x50 && header[2] === 0x4E && header[3] === 0x47) {\n      return 'image/png';\n    }\n    \n    // JPEG\n    if (header[0] === 0xFF && header[1] === 0xD8) {\n      return 'image/jpeg';\n    }\n    \n    // WebP\n    if (buffer.subarray(0, 12).toString() === 'RIFF' && buffer.subarray(8, 12).toString() === 'WEBP') {\n      return 'image/webp';\n    }\n    \n    // Default to JPEG\n    return 'image/jpeg';\n  }\n\n  private async compressImage(imageBuffer: Buffer): Promise<Buffer> {\n    try {\n      const { createCanvas, loadImage } = await import('canvas');\n      \n      // Load the image\n      const image = await loadImage(imageBuffer);\n      const originalWidth = image.width;\n      const originalHeight = image.height;\n      \n      // Calculate new dimensions to stay under 1MB\n      // Start with 70% quality and adjust size if needed\n      let quality = 0.7;\n      let scale = 1.0;\n      \n      // If image is very large, scale it down\n      const maxDimension = 2048;\n      if (originalWidth > maxDimension || originalHeight > maxDimension) {\n        scale = Math.min(maxDimension / originalWidth, maxDimension / originalHeight);\n      }\n      \n      const newWidth = Math.round(originalWidth * scale);\n      const newHeight = Math.round(originalHeight * scale);\n      \n      // Create canvas and draw resized image\n      const canvas = createCanvas(newWidth, newHeight);\n      const ctx = canvas.getContext('2d');\n      ctx.drawImage(image, 0, 0, newWidth, newHeight);\n      \n      // Convert to JPEG with compression\n      let compressedBuffer = canvas.toBuffer('image/jpeg', { quality });\n      \n      // If still too large, reduce quality further\n      while (compressedBuffer.length > 1024 * 1024 && quality > 0.3) {\n        quality -= 0.1;\n        compressedBuffer = canvas.toBuffer('image/jpeg', { quality });\n      }\n      \n      return compressedBuffer;\n    } catch (error) {\n      console.error('Image compression failed:', error);\n      // If compression fails, try to use original but throw error if too large\n      if (imageBuffer.length > 1024 * 1024) {\n        throw new Error('File size exceeds the maximum size limit. Maximum size limit 1024 KB');\n      }\n      return imageBuffer;\n    }\n  }\n\n  private filterOCRText(text: string): string {\n    console.log(\"Original OCR text:\", text);\n    \n    // Check for completely garbled OCR (lots of symbols but no real words)\n    const hasRealWords = text.match(/\\b[A-Za-z]{3,}\\b/g);\n    const weirdChars = (text.match(/[¥€£™®©§¶†‡•…‰′″‹›«»]/g) || []).length;\n    const symbolRatio = (text.match(/[^\\w\\s]/g) || []).length / text.length;\n    \n    console.log(\"Real words found:\", hasRealWords ? hasRealWords.length : 0);\n    console.log(\"Weird chars:\", weirdChars);\n    console.log(\"Symbol ratio:\", symbolRatio);\n    \n    // Only show error message for completely garbled text\n    if ((!hasRealWords || hasRealWords.length < 3) && (weirdChars > 5 || symbolRatio > 0.6)) {\n      return \"OCR could not extract readable text from this image.\\n\\nThe text appears to be too stylized, decorative, or low resolution for accurate recognition.\\n\\nTry using:\\n• Plain text documents\\n• Screenshots with simple fonts\\n• High-contrast images\\n• Less decorative text styles\";\n    }\n    \n    // Clean up the text by removing obvious UI elements\n    const lines = text.split(/\\n+/).map(line => line.trim()).filter(line => line.length > 0);\n    \n    const cleanLines = lines.filter(line => {\n      const lowerLine = line.toLowerCase();\n      \n      // Skip obvious UI noise but be less aggressive\n      if (lowerLine.match(/^\\d+(\\.\\d+)?[km]?\\s*(like|follow|view|share)s?$/i)) return false;\n      if (lowerLine.match(/^(manage|edit|more)$/i)) return false;\n      if (lowerLine.match(/^@[a-z0-9_]+$/)) return false;\n      \n      // Keep lines with readable content\n      const readableChars = line.match(/[A-Za-z]/g);\n      return readableChars && readableChars.length >= 2;\n    });\n    \n    const result = cleanLines.slice(0, 20).join('\\n').trim();\n    console.log(\"Filtered result:\", result);\n    return result;\n  }\n\n  private calculateConfidence(text: string, ocrResult: any): number {\n    if (!text || text.length === 0) return 0;\n    \n    // Base confidence factors\n    let confidence = 75; // Start with base confidence\n    \n    // Factor 1: Text length and structure\n    const wordCount = text.split(/\\s+/).filter((w: string) => w.length > 0).length;\n    if (wordCount > 10) confidence += 5;\n    if (wordCount > 30) confidence += 5;\n    \n    // Factor 2: Proper word ratio\n    const properWords = text.match(/\\b[A-Za-z]{3,}\\b/g) || [];\n    const totalTokens = text.split(/\\s+/).length;\n    const properWordRatio = properWords.length / Math.max(1, totalTokens);\n    confidence += Math.floor(properWordRatio * 15);\n    \n    // Factor 3: Presence of readable sentences\n    const sentences = text.split(/[.!?]+/).filter(s => s.trim().length > 10);\n    if (sentences.length > 0) confidence += 5;\n    if (sentences.length > 2) confidence += 5;\n    \n    // Factor 4: Low symbol noise\n    const symbolRatio = (text.match(/[^\\w\\s]/g) || []).length / text.length;\n    if (symbolRatio < 0.1) confidence += 10;\n    else if (symbolRatio < 0.2) confidence += 5;\n    \n    // Factor 5: Proper capitalization patterns\n    const capitalizedWords = text.match(/\\b[A-Z][a-z]+/g) || [];\n    if (capitalizedWords.length > 0) confidence += 5;\n    \n    return Math.min(99, Math.max(50, confidence));\n  }\n}","size_bytes":10242},"client/src/hooks/useAuth.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { createContext, useContext, ReactNode } from \"react\";\n\ninterface User {\n  id: string;\n  username: string;\n  email: string;\n  isPremium: boolean;\n}\n\ninterface Usage {\n  imageCount: number;\n  dailyLimit: number;\n  canProcess: boolean;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  login: (credentials: { username: string; password: string }) => Promise<void>;\n  register: (userData: { username: string; email: string; password: string }) => Promise<void>;\n  logout: () => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const queryClient = useQueryClient();\n\n  // Query for current user\n  const {\n    data: user,\n    isLoading,\n    error\n  } = useQuery({\n    queryKey: [\"user\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/user\", {\n        credentials: \"include\",\n      });\n      \n      if (!response.ok) {\n        if (response.status === 401) {\n          return null; // Not authenticated\n        }\n        throw new Error(\"Failed to fetch user\");\n      }\n      \n      const data = await response.json();\n      return data.user as User;\n    },\n    retry: false,\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: { username: string; password: string }) => {\n      const response = await fetch(\"/api/login\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        credentials: \"include\",\n        body: JSON.stringify(credentials),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || \"Login failed\");\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"user\"] });\n      queryClient.invalidateQueries({ queryKey: [\"usage\"] });\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (userData: { username: string; email: string; password: string }) => {\n      const response = await fetch(\"/api/register\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        credentials: \"include\",\n        body: JSON.stringify(userData),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        // For payment required (402), include the email for redirect\n        if (response.status === 402 && error.requiresPayment) {\n          const paymentError = new Error(error.error || \"Payment required\");\n          (paymentError as any).requiresPayment = true;\n          (paymentError as any).email = error.email;\n          throw paymentError;\n        }\n        throw new Error(error.error || \"Registration failed\");\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"user\"] });\n      queryClient.invalidateQueries({ queryKey: [\"usage\"] });\n    },\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch(\"/api/logout\", {\n        method: \"POST\",\n        credentials: \"include\",\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Logout failed\");\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"user\"] });\n      queryClient.invalidateQueries({ queryKey: [\"usage\"] });\n      queryClient.clear(); // Clear all cached data\n    },\n  });\n\n  const value: AuthContextType = {\n    user: user || null,\n    isAuthenticated: !!user,\n    isLoading,\n    login: async (credentials) => {\n      await loginMutation.mutateAsync(credentials);\n    },\n    register: async (userData) => {\n      await registerMutation.mutateAsync(userData);\n    },\n    logout: async () => {\n      await logoutMutation.mutateAsync();\n    },\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n}\n\nexport function useAuth(): AuthContextType {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n\n// Hook for usage data - now works for both authenticated and anonymous users\nexport function useUsage() {\n  return useQuery({\n    queryKey: [\"usage\"],\n    queryFn: async (): Promise<Usage> => {\n      const response = await fetch(\"/api/usage\", {\n        credentials: \"include\",\n      });\n      \n      if (!response.ok) {\n        throw new Error(\"Failed to fetch usage\");\n      }\n      \n      return response.json();\n    },\n    retry: 1,\n    enabled: true, // Always try to fetch usage for both authenticated and anonymous users\n  });\n}","size_bytes":4795}}}